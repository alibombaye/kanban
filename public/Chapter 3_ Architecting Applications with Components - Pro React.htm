<!DOCTYPE html>
<!-- saved from url=(0095)https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml -->
<html class=" js flexbox flexboxlegacy no-touch websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg zoom" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="918994" data-user-uuid="2503a136-a8d4-44da-ac19-74565cff32e9" data-username="alibombaye" data-account-type="B2B" data-activated-trial-date="09/02/2015" data-archive="9781484212608" data-publishers="Apress" data-htmlfile-name="9781484212615_Ch02.xhtml" data-epub-title="Pro React" data-debug="0" data-testing="0"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9781484212608"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script type="text/javascript" src="./Chapter 3_ Architecting Applications with Components - Pro React_files/510f1a6865"></script><script src="./Chapter 3_ Architecting Applications with Components - Pro React_files/nr-974.min.js"></script><script type="text/javascript" async="" src="./Chapter 3_ Architecting Applications with Components - Pro React_files/linkid.js"></script><script async="" src="./Chapter 3_ Architecting Applications with Components - Pro React_files/analytics.js"></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,n){function r(t){try{s.console&&console.log(t)}catch(e){}}var o,i=t("ee"),a=t(15),s={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(s.console=!0,o.indexOf("dev")!==-1&&(s.dev=!0),o.indexOf("nr_dev")!==-1&&(s.nrDev=!0))}catch(c){}s.nrDev&&i.on("internal-error",function(t){r(t.stack)}),s.dev&&i.on("fn-err",function(t,e,n){r(n.stack)}),s.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(s,function(t,e){return t}).join(", ")))},{}],2:[function(t,e,n){function r(t,e,n,r,o){try{d?d-=1:i("err",[o||new UncaughtException(t,e,n)])}catch(s){try{i("ierr",[s,(new Date).getTime(),!0])}catch(c){}}return"function"==typeof f&&f.apply(this,a(arguments))}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function o(t){i("err",[t,(new Date).getTime()])}var i=t("handle"),a=t(16),s=t("ee"),c=t("loader"),f=window.onerror,u=!1,d=0;c.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(l){"stack"in l&&(t(8),t(7),"addEventListener"in window&&t(5),c.xhrWrappable&&t(9),u=!0)}s.on("fn-start",function(t,e,n){u&&(d+=1)}),s.on("fn-err",function(t,e,n){u&&(this.thrown=!0,o(n))}),s.on("fn-end",function(){u&&!this.thrown&&d>0&&(d-=1)}),s.on("internal-error",function(t){i("ierr",[t,(new Date).getTime(),!0])})},{}],3:[function(t,e,n){t("loader").features.ins=!0},{}],4:[function(t,e,n){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(8),s=t(7),c="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",y="pushState";t("loader").features.stn=!0,t(6);var g=NREUM.o.EV;o.on(m,function(t,e){var n=t[0];n instanceof g&&(this.bstStart=Date.now())}),o.on(w,function(t,e){var n=t[0];n instanceof g&&i("bst",[n,e,this.bstStart,Date.now()])}),a.on(m,function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),a.on(w,function(t,e){i(v,[e,this.bstStart,Date.now(),this.bstType])}),s.on(m,function(){this.bstStart=Date.now()}),s.on(w,function(t,e){i(v,[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),o.on(y+p,function(t){this.time=Date.now(),this.startPath=location.pathname+location.hash}),o.on(y+h,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+c]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["c"+c]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+c]()},!1)),document[f]("scroll",r,!1),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],5:[function(t,e,n){function r(t){for(var e=t;e&&!e.hasOwnProperty(u);)e=Object.getPrototypeOf(e);e&&o(e)}function o(t){s.inPlace(t,[u,d],"-",i)}function i(t,e){return t[1]}var a=t("ee").get("events"),s=t(17)(a),c=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";e.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,e){if(t[1]){var n=t[1];if("function"==typeof n){var r=c(n,"nr@wrapped",function(){return s(n,"fn-",null,n.name||"anonymous")});this.wrapped=t[1]=r}else"function"==typeof n.handleEvent&&s.inPlace(n,["handleEvent"],"fn-")}}),a.on(d+"-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{}],6:[function(t,e,n){var r=t("ee").get("history"),o=t(17)(r);e.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],7:[function(t,e,n){var r=t("ee").get("raf"),o=t(17)(r),i="equestAnimationFrame";e.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],8:[function(t,e,n){function r(t,e,n){t[0]=a(t[0],"fn-",null,n)}function o(t,e,n){this.method=n,this.timerDuration="number"==typeof t[1]?t[1]:0,t[0]=a(t[0],"fn-",this,n)}var i=t("ee").get("timer"),a=t(17)(i),s="setTimeout",c="setInterval",f="clearTimeout",u="-start",d="-";e.exports=i,a.inPlace(window,[s,"setImmediate"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(c+u,r),i.on(s+u,o)},{}],9:[function(t,e,n){function r(t,e){d.inPlace(e,["onreadystatechange"],"fn-",s)}function o(){var t=this,e=u.context(t);t.readyState>3&&!e.resolved&&(e.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,w,"fn-",s)}function i(t){v.push(t),h&&(g=-g,b.data=g)}function a(){for(var t=0;t<v.length;t++)r([],v[t]);v.length&&(v=[])}function s(t,e){return e}function c(t,e){for(var n in t)e[n]=t[n];return e}t(5);var f=t("ee"),u=f.get("xhr"),d=t(17)(u),l=NREUM.o,p=l.XHR,h=l.MO,m="readystatechange",w=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],v=[];e.exports=u;var y=window.XMLHttpRequest=function(t){var e=new p(t);try{u.emit("new-xhr",[e],e),e.addEventListener(m,o,!1)}catch(n){try{u.emit("internal-error",[n])}catch(r){}}return e};if(c(p,y),y.prototype=p.prototype,d.inPlace(y.prototype,["open","send"],"-xhr-",s),u.on("send-xhr-start",function(t,e){r(t,e),i(e)}),u.on("open-xhr-start",r),h){var g=1,b=document.createTextNode(g);new h(a).observe(b,{characterData:!0})}else f.on("fn-end",function(t){t[0]&&t[0].type===m||a()})},{}],10:[function(t,e,n){function r(t){var e=this.params,n=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!e.aborted){if(n.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var i=o(t,this.lastSize);if(i&&(n.rxSize=i),this.sameOrigin){var a=t.getResponseHeader("X-NewRelic-App-Data");a&&(e.cat=a.split(", ").pop())}}else e.status=0;n.cbTime=this.cbTime,f.emit("xhr-done",[t],t),s("xhr",[e,n,this.startTime])}}}function o(t,e){var n=t.responseType;if("json"===n&&null!==e)return e;var r="arraybuffer"===n||"blob"===n||"json"===n?t.response:t.responseText;return h(r)}function i(t,e){var n=c(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}var a=t("loader");if(a.xhrWrappable){var s=t("handle"),c=t(11),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,l=t("id"),p=t(14),h=t(13),m=window.XMLHttpRequest;a.features.xhr=!0,t(9),f.on("new-xhr",function(t){var e=this;e.totalCbs=0,e.called=0,e.cbTime=0,e.end=r,e.ended=!1,e.xhrGuids={},e.lastSize=null,p&&(p>34||p<10)||window.opera||t.addEventListener("progress",function(t){e.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,e){var n=this.metrics,r=t[0],o=this;if(n&&r){var i=h(r);i&&(n.txSize=i)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof e.onload))&&o.end(e)}catch(n){try{f.emit("internal-error",[n])}catch(r){}}};for(var a=0;a<d;a++)e.addEventListener(u[a],this.listener,!1)}),f.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),f.on("xhr-load-added",function(t,e){var n=""+l(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,e){var n=""+l(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],e)}),f.on("removeEventListener-end",function(t,e){e instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],e)}),f.on("fn-start",function(t,e,n){e instanceof m&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),f.on("fn-end",function(t,e){this.xhrCbStart&&f.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{}],11:[function(t,e,n){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!e.protocol||":"===e.protocol||e.protocol===n.protocol,a=e.hostname===document.domain&&e.port===n.port;return r.sameOrigin=i&&(!e.hostname||a),r}},{}],12:[function(t,e,n){function r(){}function o(t,e,n){return function(){return i(t,[(new Date).getTime()].concat(s(arguments)),e?null:this,n),e?void 0:this}}var i=t("handle"),a=t(15),s=t(16),c=t("ee").get("tracer"),f=NREUM;"undefined"==typeof window.newrelic&&(newrelic=f);var u=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit"],d="api-",l=d+"ixn-";a(u,function(t,e){f[e]=o(d+e,!0,"api")}),f.addPageAction=o(d+"addPageAction",!0),e.exports=newrelic,f.interaction=function(){return(new r).get()};var p=r.prototype={createTracer:function(t,e){var n={},r=this,o="function"==typeof e;return i(l+"tracer",[Date.now(),t,n],r),function(){if(c.emit((o?"":"no-")+"fn-start",[Date.now(),r,o],n),o)try{return e.apply(this,arguments)}finally{c.emit("fn-end",[Date.now()],n)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,e){p[e]=o(l+e)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,(new Date).getTime()])}},{}],13:[function(t,e,n){e.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(e){return}}}},{}],14:[function(t,e,n){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),e.exports=r},{}],15:[function(t,e,n){function r(t,e){var n=[],r="",i=0;for(r in t)o.call(t,r)&&(n[i]=e(r,t[r]),i+=1);return n}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],16:[function(t,e,n){function r(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(o<0?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=r},{}],17:[function(t,e,n){function r(t){return!(t&&"function"==typeof t&&t.apply&&!t[a])}var o=t("ee"),i=t(16),a="nr@original",s=Object.prototype.hasOwnProperty,c=!1;e.exports=function(t){function e(t,e,n,o){function nrWrapper(){var r,a,s,c;try{a=this,r=i(arguments),s="function"==typeof n?n(r,a):n||{}}catch(u){d([u,"",[r,a,o],s])}f(e+"start",[r,a,o],s);try{return c=t.apply(a,r)}catch(l){throw f(e+"err",[r,a,l],s),l}finally{f(e+"end",[r,a,c],s)}}return r(t)?t:(e||(e=""),nrWrapper[a]=t,u(t,nrWrapper),nrWrapper)}function n(t,n,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<n.length;c++)s=n[c],a=t[s],r(a)||(t[s]=e(a,f?s+o:o,i,s))}function f(e,n,r){if(!c){c=!0;try{t.emit(e,n,r)}catch(o){d([o,e,n,r])}c=!1}}function u(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){d([r])}for(var o in t)s.call(t,o)&&(e[o]=t[o]);return e}function d(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=o),e.inPlace=n,e.flag=a,e}},{}],ee:[function(t,e,n){function r(){}function o(t){function e(t){return t&&t instanceof r?t:t?s(t,a,i):i()}function n(n,r,o){t&&t(n,r,o);for(var i=e(o),a=l(n),s=a.length,c=0;c<s;c++)a[c].apply(i,r);var u=f[w[n]];return u&&u.push([v,n,r,i]),i}function d(t,e){m[t]=l(t).concat(e)}function l(t){return m[t]||[]}function p(t){return u[t]=u[t]||o(n)}function h(t,e){c(t,function(t,n){e=e||"feature",w[n]=e,e in f||(f[e]=[])})}var m={},w={},v={on:d,emit:n,get:p,listeners:l,context:e,buffer:h};return v}function i(){return new r}var a="nr@context",s=t("gos"),c=t(15),f={},u={},d=e.exports=o();d.backlog=f},{}],gos:[function(t,e,n){function r(t,e,n){if(o.call(t,e))return t[e];var r=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[e]=r,r}var o=Object.prototype.hasOwnProperty;e.exports=r},{}],handle:[function(t,e,n){function r(t,e,n,r){o.buffer([t],r),o.emit(t,e,n)}var o=t("ee").get("handle");e.exports=r,r.ee=o},{}],id:[function(t,e,n){function r(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");e.exports=r},{}],loader:[function(t,e,n){function r(){if(!g++){var t=y.info=NREUM.info,e=u.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){c(w,function(e,n){t[e]||(t[e]=n)});var n="https"===m.split(":")[0]||t.sslForHttp;y.proto=n?"https://":"http://",s("mark",["onload",a()],null,"api");var r=u.createElement("script");r.src=y.proto+t.agent,e.parentNode.insertBefore(r,e)}}}function o(){"complete"===u.readyState&&i()}function i(){s("mark",["domContent",a()],null,"api")}function a(){return(new Date).getTime()}var s=t("handle"),c=t(15),f=window,u=f.document,d="addEventListener",l="attachEvent",p=f.XMLHttpRequest,h=p&&p.prototype;NREUM.o={ST:setTimeout,CT:clearTimeout,XHR:p,REQ:f.Request,EV:f.Event,PR:f.Promise,MO:f.MutationObserver},t(12);var m=""+location,w={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-974.min.js"},v=p&&h&&h[d]&&!/CriOS/.test(navigator.userAgent),y=e.exports={offset:a(),origin:m,features:{},xhrWrappable:v};u[d]?(u[d]("DOMContentLoaded",i,!1),f[d]("load",r,!1)):(u[l]("onreadystatechange",o),f[l]("onload",r)),s("mark",["firstbyte",a()],null,"api");var g=0},{}]},{},["loader",2,10,4,3]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.8cc2fd27400e.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="./Chapter 3_ Architecting Applications with Components - Pro React_files/css" rel="stylesheet" type="text/css"><title>Chapter 3: Architecting Applications with Components - Pro React</title><link rel="stylesheet" href="./Chapter 3_ Architecting Applications with Components - Pro React_files/7b306361e997.css" type="text/css"><link rel="stylesheet" type="text/css" href="./Chapter 3_ Architecting Applications with Components - Pro React_files/annotator.min.fd58f69f4908.css"><link rel="stylesheet" href="./Chapter 3_ Architecting Applications with Components - Pro React_files/font-awesome.min.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin:1em 1em 1em 1em;adobe-hyphenate:none}#sbo-rt-content a{text-decoration:none}#sbo-rt-content p.img{max-width:100%;margin-top:1em;margin-bottom:1em;text-align:left}#sbo-rt-content p.img-l{max-width:100%;margin-top:1em;margin-bottom:1em;text-align:left}#sbo-rt-content p.img-c{max-width:100%;margin-top:1em;margin-bottom:1em;text-align:center}#sbo-rt-content p.img-r{max-width:100%;margin-top:1em;margin-bottom:1em;text-align:right}#sbo-rt-content p.booktitle{font-weight:bold;font-size:2.5em;margin-top:2em;margin-bottom:7em;text-align:center}#sbo-rt-content p.bookauthor{font-weight:normal;font-size:1.7em;margin-top:.7em;margin-right:2em;margin-bottom:0;text-align:left}#sbo-rt-content p.booksubtitle{font-weight:bold;font-size:1.7em;margin-top:1em;margin-bottom:7em;text-align:center;color:#8A8A8A}#sbo-rt-content .bookimage{font-size:1.2em;margin-top:0;margin-bottom:1em;text-align:left}#sbo-rt-content .fmpara{font-size:.9em;text-indent:0;margin-top:.5em;margin-bottom:.3em;text-align:justify}#sbo-rt-content .fmpara1{font-size:.9em;text-indent:0;margin-top:.4em;margin-bottom:.3em;text-align:right}#sbo-rt-content .inpara{text-indent:0;margin-top:.4em;margin-left:3em;margin-bottom:.3em}#sbo-rt-content .pub{margin-top:10em;margin-bottom:1em;text-align:right;margin-right:5em}#sbo-rt-content p.copyright{font-size:.9em;margin-top:.7em;margin-bottom:.4em;margin-left:1.2em;margin-right:1.2em;text-align:left}#sbo-rt-content p.copyright1{font-size:.9em;margin-top:.1em;margin-bottom:.1em;margin-left:5em;margin-right:3.3em;text-align:left;text-indent:-1.6em}#sbo-rt-content p.copyright2{font-size:.9em;margin-top:.1em;margin-bottom:.1em;margin-left:4.2em}#sbo-rt-content p.dedication{font-size:1.1em;margin-bottom:0;margin-top:1.5em;text-align:center;margin-right:0;font-style:italic}#sbo-rt-content p.dedication1{font-size:1.1em;margin-bottom:0;margin-top:.7em;text-align:center;margin-right:0;font-style:normal}#sbo-rt-content p.dedication2{font-size:1.2em;margin-bottom:0;margin-top:.8em;text-align:center;margin-right:1em}#sbo-rt-content .content-title{font-size:1.6em;margin-top:3em;margin-bottom:.1em;text-align:left;font-weight:bold}#sbo-rt-content .fmtitle{font-weight:bold;font-size:2.5em;margin-top:1em;margin-bottom:1em;margin-left:0;text-align:left;border-bottom:1.1px solid black;padding-bottom:.8em}#sbo-rt-content .right{text-indent:0;margin-top:1em;margin-right:1.5em;margin-bottom:.3em;text-align:right}#sbo-rt-content .right1{text-indent:0;margin-top:0;margin-right:1.5em;margin-bottom:.2em;text-align:right}#sbo-rt-content .Chapimage{margin-left:0;margin-top:1.5em;margin-bottom:1.5em;text-align:left}#sbo-rt-content p.ChapterNumber{font-weight:bold;font-size:1.7em;margin-top:10px;margin-left:0;margin-bottom:1.5em;text-align:left}#sbo-rt-content p.ChapterTitle{font-weight:bold;font-size:2.5em;margin-top:1em;margin-bottom:1em;margin-left:0;text-align:left;border-bottom:1.1px solid black;padding-bottom:.8em}#sbo-rt-content p.PartNumber{font-weight:bold;font-size:1.7em;margin-top:10px;margin-left:0;margin-bottom:5px;text-align:left;padding-bottom:.8em}#sbo-rt-content p.PartTitle{font-weight:bold;font-size:2.5em;margin-top:1em;margin-bottom:1em;margin-left:0;text-align:left}#sbo-rt-content .paraaftertitle{font-size:100%;text-indent:0;margin-top:0;margin-left:0;margin-bottom:0}#sbo-rt-content p.noindent{font-size:100%;text-indent:0;margin-top:1em;margin-bottom:0;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.noindent1{font-size:100%;text-indent:0;margin-top:1em;margin-bottom:1em}#sbo-rt-content p.noindent2{font-size:100%;text-indent:0;margin-top:1.5em;margin-bottom:1em}#sbo-rt-content p.noindent3{font-size:100%;text-indent:0;margin-top:.2em;margin-bottom:1.5em;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.noindent4{font-size:100%;text-indent:0;margin-top:.8em;margin-bottom:.2em;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content span.listing{font-weight:bold}#sbo-rt-content p.indent{font-size:100%;text-indent:1.5em;margin-top:.1em;margin-bottom:.1em;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.indentt{font-size:100%;text-indent:1.5em;margin-top:1em;margin-bottom:.1em;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.indent1{font-size:100%;text-indent:1.2em;margin-top:0;margin-bottom:0;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.indent1a{font-size:100%;text-indent:1.5em;margin-top:0;margin-bottom:0;margin-left:0;margin-right:4.5em;text-align:right}#sbo-rt-content p.indent2{font-size:100%;margin-top:.8em;margin-bottom:.8em;margin-left:2.4em;margin-right:2.4em;text-align:justify;font-style:italic}#sbo-rt-content p.indent3{font-size:100%;text-indent:1em;margin-top:.8em;margin-bottom:.8em;margin-left:1.8em;margin-right:1.8em;text-align:left}#sbo-rt-content p.indent4{font-size:100%;text-indent:1.3em;margin-top:.5em;margin-bottom:.5em;margin-left:2em;margin-right:0;text-align:left}#sbo-rt-content div.blockquote{font-size:100%;text-indent:0;margin-top:1em;margin-left:2em;margin-right:1em;margin-bottom:1em;text-align:left}#sbo-rt-content p.block-noindent{font-size:100%;text-indent:0;margin-top:.5em;margin-left:0;margin-right:1em;margin-bottom:0;text-align:justify}#sbo-rt-content div.blockquote1{font-size:100%;text-indent:0;margin-top:.7em;margin-left:5em;margin-right:2em;margin-bottom:1em;text-align:left}#sbo-rt-content div.block-noindent1{font-size:100%;text-indent:0;margin-top:1em;margin-left:1.2em;margin-right:3em;margin-bottom:1em;text-align:left}#sbo-rt-content p.Heading1{font-weight:bold;font-size:2em;text-indent:0;margin-top:1em;margin-bottom:.2em}#sbo-rt-content p.Heading2{font-size:1.6em;text-indent:0;margin-top:1em;margin-bottom:.3em}#sbo-rt-content p.Heading2-a{font-size:1.6em;text-indent:0;margin-top:.2em;margin-bottom:.3em}#sbo-rt-content p.Heading2a{font-size:1.5em;text-indent:0;margin-top:.7em;margin-bottom:.3em;font-weight:bold}#sbo-rt-content p.Heading3{font-weight:bold;font-size:1.45em;text-indent:0;margin-top:1.2em;margin-bottom:.1em}#sbo-rt-content p.Heading3a{font-weight:bold;font-size:1.45em;text-indent:0;margin-top:.3em;margin-bottom:.3em}#sbo-rt-content p.Heading4{font-size:1.3em;text-indent:0;margin-top:1.3em;margin-bottom:.3em;text-align:left}#sbo-rt-content .img1{text-align:right;margin-top:3em;margin-bottom:.3em}#sbo-rt-content .img1a{text-align:right;margin-right:1em;margin-top:5em}#sbo-rt-content .img2{text-align:left;margin-bottom:1.5em}#sbo-rt-content div.Figure{font-size:small;margin-top:1.5em;margin-bottom:1.5em}#sbo-rt-content .para-1{font-size:100%;margin-top:1em;text-indent:1.5em;margin-bottom:0;text-align:left}#sbo-rt-content .para-2{font-size:.9em;text-indent:-1.4em;margin-left:2.4em;margin-top:.5em;margin-bottom:0}#sbo-rt-content .figurecaption{font-size:small;margin-top:0;margin-bottom:0;text-align:justify}#sbo-rt-content .image{text-align:center}#sbo-rt-content .codecaption{font-size:100%;margin-top:.6em;margin-bottom:.6em;text-align:justify;font-style:italic}#sbo-rt-content .PCode{font-size:small;margin-top:1em;margin-bottom:1em;margin-left:0;text-align:left;font-family:monospace}#sbo-rt-content .PCode-1{font-size:small;margin-top:1em;margin-bottom:.1em;margin-left:0;text-align:left;font-family:monospace}#sbo-rt-content .PCode-2{font-size:small;margin-top:0;margin-bottom:0;margin-left:0;text-align:left;font-family:monospace}#sbo-rt-content .PCode-3{font-size:small;margin-top:0;margin-bottom:1em;margin-left:0;text-align:left;font-family:monospace}#sbo-rt-content div.Singlethin{border-bottom:solid 3px;margin-left:0;margin-right:0;margin-bottom:1em;margin-top:1em}#sbo-rt-content p.box-left{font-size:100%;text-indent:0;margin-top:.7em;margin-bottom:.7em;margin-left:1em;margin-right:1em;text-align:left}#sbo-rt-content p.box-left1{font-size:100%;text-indent:0;margin-top:.7em;margin-bottom:.7em;margin-left:1em;margin-right:1em;text-align:left}#sbo-rt-content div.singlethin1{margin-left:2em;margin-right:2em}#sbo-rt-content .inlinecode{font-family:monospace}#sbo-rt-content div.notepara{font-size:110%;text-indent:0;margin-top:1em;border-top:solid 1px;border-bottom:solid 1px;margin-bottom:1em;text-align:justify}#sbo-rt-content span.pink-box{font-weight:bold;padding-left:1.3em;padding-right:1.3em;border:1.1px solid black;font-size:1.5em;margin-top:.5em;margin-bottom:.5em;text-indent:0;text-align:justify}#sbo-rt-content span.courier{font-family:Courier New;font-weight:normal;font-style:normal;font-size:100%}#sbo-rt-content div.courier{font-family:Courier New;font-weight:normal;font-style:normal;font-size:100%;margin-top:1em;margin-bottom:1em}#sbo-rt-content div.boxcourier{font-family:Courier New;font-weight:normal;font-style:normal;font-size:100%;margin-top:1em;margin-bottom:1em;margin-left:1.5em;margin-right:1.5em;text-align:left}#sbo-rt-content span.courier1{font-family:Courier New;font-weight:normal;font-style:normal;font-size:95%}#sbo-rt-content .boxhead{font-size:1.25em;font-weight:bold;padding-left:.1em;padding-bottom:.1em;padding-top:.1em;margin-top:0;text-indent:0;text-align:center;border:3px solid black}#sbo-rt-content div.box{margin-top:1em;margin-bottom:1em}#sbo-rt-content .boxpara{font-size:110%;text-indent:0;margin-left:1.5em;margin-right:1.5em;margin-top:.5em;margin-bottom:.5em;text-align:left}#sbo-rt-content .alpha{font-size:1.2em;font-weight:bold;margin-left:0;margin-top:1em;margin-bottom:.3em;text-align:left}#sbo-rt-content .index{font-size:small;margin-left:0;margin-top:0;margin-bottom:0;text-align:left}#sbo-rt-content .index1{font-size:small;margin-left:1.7em;margin-top:0;margin-bottom:0;text-align:left}#sbo-rt-content .index2{font-size:small;margin-left:3.3em;margin-top:0;margin-bottom:0;text-align:left}#sbo-rt-content .cover{text-align:center}#sbo-rt-content .top{border-top:1.1px solid black;border-bottom:2px solid black}#sbo-rt-content .bot{border-bottom:2px solid black}#sbo-rt-content table.bodytable,#sbo-rt-content table{border-collapse:collapse;margin-bottom:8px;font-size:small;margin-top:10pt;width:95%;border-top:0 solid black;border-bottom:0 solid black}#sbo-rt-content table.fmtable{margin-bottom:1em;font-size:1em;margin-left:4em;border-top:0 solid #FFF;border-bottom:0 solid #FFF}#sbo-rt-content table{margin-bottom:1em;border-top:1.1px solid black;border-bottom:1.1px solid black;border-collapse:collapse}#sbo-rt-content th{border-top:1px solid black;border-bottom:1px solid black;padding-right:1.5em}#sbo-rt-content td{font-size:small;padding-right:1.5em;margin-top:0;margin-bottom:1em}#sbo-rt-content .tablepara{font-size:small;text-indent:0;margin-top:0;margin-bottom:.5em;padding-right:1.5em}#sbo-rt-content .tablepara1{font-size:small;margin-left:2em;margin-top:0;margin-bottom:0;padding-right:1.5em}#sbo-rt-content .header{border-bottom:1.1px solid black;text-indent:0;text-align:left}#sbo-rt-content .header1{border-top:1.1px solid black;text-indent:0;text-align:left}#sbo-rt-content .TabCapt{font-style:italic;margin-left:0;margin-top:.3em;margin-bottom:.3em;text-indent:0}#sbo-rt-content .FigCapt{font-style:italic;font-size:.9em}#sbo-rt-content .CaptNr{font-weight:bold}#sbo-rt-content .ttitle{font-style:Italic;margin-bottom:1em}#sbo-rt-content p.paraaftertitle1{font-size:.9em;text-indent:0;margin-top:.5em;margin-bottom:.8em;text-align:left}#sbo-rt-content p.para{font-size:small;text-indent:20px;margin-top:0;margin-bottom:0;text-align:justify}#sbo-rt-content p.quote{font-style:italic;font-size:100%;margin-top:1.5em;margin-left:2.5em;margin-right:2.5em;margin-bottom:0}#sbo-rt-content p.quotesource{font-size:small;text-indent:0;margin-top:1em;margin-bottom:1em;text-align:right}#sbo-rt-content p.chaptersubtitle{font-size:x-large;text-indent:0;margin-top:0;margin-left:0;margin-bottom:0;text-align:left}#sbo-rt-content p.line{margin-top:.3em;border-bottom:1px solid black}#sbo-rt-content p.line1{margin-top:.3em;margin-bottom:1.5em;border-bottom:1px solid black}#sbo-rt-content p.line2{margin-top:5em;margin-bottom:5em;border-bottom:1px solid black;text-align:center;margin-left:15em;margin-right:15em}#sbo-rt-content li{margin-bottom:.5em;margin-top:.5em}#sbo-rt-content p.alpha{font-size:1.2em;font-weight:bold;margin-left:0;margin-top:1em;margin-bottom:.3em;text-align:left}#sbo-rt-content ul.bulleted-list{font-size:100%;text-align:left;margin-left:5em;margin-right:3em;margin-top:1em;margin-bottom:1em;text-indent:0}#sbo-rt-content ul.bulletedin-list{font-size:100%;text-align:left;margin-left:6em;margin-right:3em;margin-top:1em;margin-bottom:1em;text-indent:0}#sbo-rt-content ul.bulleted{font-size:100%;text-align:left;margin-left:3em;margin-right:3em;margin-top:1em;margin-bottom:1em;text-indent:0}#sbo-rt-content ul.bulleted-thin{font-size:100%;text-align:left;margin-left:1em;margin-right:1em;margin-top:1em;margin-bottom:1em;text-indent:0}#sbo-rt-content ol.OrderedList{font-size:100%;text-align:left;margin-left:4em;margin-right:3em;margin-top:1em;margin-bottom:1em}#sbo-rt-content ul.bulleted1{font-size:100%;text-indent:0;margin-top:.7em;margin-left:5em;margin-right:2em;margin-bottom:1em;text-align:left;list-style-type:none}#sbo-rt-content ul.bulleted1_a{font-size:100%;text-align:justify;margin-left:0;margin-right:5em;margin-top:1em;margin-bottom:1em;text-indent:0;list-style-type:none}#sbo-rt-content ul.bulleted2{font-size:100%;text-align:justify;margin-left:2.3em;margin-right:5em;margin-top:1em;margin-bottom:1em;text-indent:0}#sbo-rt-content ul.bulleted4{font-size:100%;text-align:center;margin-left:1.3em;margin-right:5em;margin-top:1em;margin-bottom:1em;text-indent:0;list-style-type:none}#sbo-rt-content .numbered{font-size:small;text-align:justify;margin-left:2em;margin-right:2em;margin-top:.5em;margin-bottom:.5em;text-indent:1em}#sbo-rt-content .bulletedin{font-size:100%;text-align:justify;margin-left:3.8em;margin-right:4em;margin-top:.5em;margin-bottom:.5em}#sbo-rt-content .bulletedin1{font-size:100%;text-align:justify;margin-left:4.5em;margin-right:4em;margin-top:.5em;margin-bottom:.5em}#sbo-rt-content ul.None{font-size:.9em;text-align:justify;margin-left:3em;margin-right:2em;margin-top:.5em;margin-bottom:.5em;list-style-type:none}#sbo-rt-content .PCode1{font-size:small;margin-top:.7em;margin-bottom:0;text-align:left;font-family:monospace}#sbo-rt-content .PCode2{font-size:small;margin-top:1em;margin-bottom:.1em;margin-left:2.2em;text-align:left;font-family:monospace}#sbo-rt-content .PCode3{font-size:small;margin-top:0;margin-left:2.2em;margin-bottom:.1em;text-align:left;font-family:monospace}#sbo-rt-content .NoteCaption{font-size:small;margin-top:1.3em;margin-left:5em;margin-right:5em;border:1.1px solid black;padding:.5em;margin-bottom:1.3em}#sbo-rt-content .Table{font-size:100%;margin-bottom:1em;margin-top:1em;margin-left:0}#sbo-rt-content .toc{font-size:1.1em;margin-top:.3em;margin-bottom:.1em;margin-left:1.1em;text-indent:-1.1em;text-align:left;font-weight:bold}#sbo-rt-content .toc-p{font-size:1.5em;margin-top:1em;margin-bottom:.1em;margin-left:1.1em;text-indent:-1.1em;text-align:left;font-weight:bold}#sbo-rt-content .toca{font-size:1.1em;margin-top:1em;margin-bottom:.4em;margin-left:1.1em;text-indent:-1.1em;text-align:left;font-weight:bold}#sbo-rt-content .toc1{font-size:1.2em;margin-top:.4em;margin-bottom:.3em;margin-left:1.1em;text-indent:-1.1em;font-weight:bold}#sbo-rt-content .toc2{font-size:1.1em;margin-top:.4em;margin-bottom:.3em;text-align:left;margin-left:1em;text-indent:0;font-weight:normal}#sbo-rt-content .toc3{font-size:.9em;margin-top:.4em;margin-bottom:.3em;text-align:left;margin-left:3em;text-indent:0;font-weight:normal}#sbo-rt-content .toc4{font-size:1.1em;margin-top:.2em;margin-bottom:.5em;margin-left:0;text-align:left;font-weight:bold}#sbo-rt-content .tocch{font-size:1.3em;margin-top:.7em;margin-bottom:.7em;text-align:left;font-weight:bold}#sbo-rt-content .noborder{margin-bottom:1em;border-top:0 solid #FFF;border-bottom:0 solid #FFF}#sbo-rt-content .authurright{text-align:right;margin-top:0;margin-bottom:0}#sbo-rt-content .FormalPara{font-size:small;margin-bottom:.7em}#sbo-rt-content .FontName1{font-size:100%;font-family:"Courier New",Courier,monospace}#sbo-rt-content span.FontName2{font-size:100%;font-family:"Courier New",Courier,monospace}#sbo-rt-content span.FontName3{font-size:100%;font-family:"Courier New",Courier,monospace}#sbo-rt-content .rightarrow{margin-top:0}#sbo-rt-content div.thinline{margin-top:1em;margin-bottom:1em;border-top:solid 4px #AFAFB0;border-bottom:solid 4px #AFAFB0}#sbo-rt-content span.line{text-decoration:underline}#sbo-rt-content span.underline{text-decoration:underline}#sbo-rt-content div.box{border-top:solid 2px;border-bottom:solid 2px}#sbo-rt-content .app{font-size:150%;margin-left:.8em}#sbo-rt-content .page{text-decoration:none;color:#000}#sbo-rt-content .cXXX{text-decoration:none;color:#000}#sbo-rt-content .textindent{margin-left:1.7em;margin-top:1em;margin-bottom:1em;font-size:100%}#sbo-rt-content .textindent1{margin-left:1.7em;margin-top:0;margin-bottom:0;font-size:100%}#sbo-rt-content .textindent2{margin-left:1.7em;margin-top:0;margin-bottom:0;font-size:100%;text-indent:1em}#sbo-rt-content p.FootNote{margin-top:.3em;margin-bottom:0;font-size:85%;text-indent:0;text-align:left;margin-left:0;margin-right:0}#sbo-rt-content p.FootLine{margin-top:3em;margin-bottom:0;font-size:100%;text-indent:0;text-align:left;margin-left:0;margin-right:0}#sbo-rt-content p.tab-foot{margin-top:.3em;margin-bottom:0;font-size:85%;text-indent:0;text-align:left;margin-left:0;margin-right:0}#sbo-rt-content pre{margin-left:0;font-family:monospace;white-space:pre-wrap}#sbo-rt-content p.pre{font-family:monospace;white-space:pre-wrap;text-indent:0;margin-top:.5em;margin-left:1.2em;margin-right:1em;margin-bottom:0;text-align:left}#sbo-rt-content p.Heading4a{font-size:1.15em;font-weight:bold;text-indent:1em;margin-top:1.3em;margin-bottom:.3em;border-top:3px solid #4d4d4c;border-left:solid 3px #4d4d4c;border-right:solid 3px #4d4d4c;border-bottom:solid 3px #4d4d4c;text-align:center}#sbo-rt-content p.noindent8{font-size:100%;text-indent:0;margin-top:1em;margin-bottom:1em;text-align:center;font-weight:bold;color:#8A8A8A}#sbo-rt-content .tocb{font-size:1.4em;margin-top:.5em;margin-bottom:.2em;text-align:left;font-weight:bold}#sbo-rt-content .part{font-weight:normal;font-size:1em;margin-bottom:5px;text-align:left;padding-left:1.3em;padding-bottom:10em;padding-right:1.3em;border:1.1px solid black}#sbo-rt-content p.Heading5{font-size:1em;text-indent:0;margin-top:1.3em;margin-bottom:.3em;text-align:left}#sbo-rt-content p.noindent5s{font-size:100%;text-indent:0;margin-top:.7em;margin-bottom:.7em;margin-left:0;margin-right:0;text-align:right}#sbo-rt-content span.strike{text-decoration:line-through}#sbo-rt-content p.tab-left{font-size:100%;text-indent:0;margin-top:.1em;margin-bottom:.1em;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.tab-leftt{font-size:100%;text-indent:0;margin-top:.5em;margin-bottom:.1em;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content p.tab-center{font-size:100%;text-indent:0;margin-top:.1em;margin-bottom:.1em;margin-left:0;margin-right:0;text-align:center}#sbo-rt-content p.tab-right{font-size:100%;text-indent:0;margin-top:.1em;margin-bottom:.1em;margin-left:0;margin-right:0;text-align:right}#sbo-rt-content .center{text-indent:0;margin-top:.5em;margin-right:0;margin-bottom:.3em;text-align:center}#sbo-rt-content .img-vert{vertical-align:middle}#sbo-rt-content ol.list-alpha{list-style-type:lower-alpha;margin-left:1em;text-align:left}#sbo-rt-content ol.listnone{list-style-type:none;margin-left:0;text-align:left}#sbo-rt-content .bull{font-size:100%;text-align:left;margin-left:0;margin-right:3em;margin-top:1em;margin-bottom:1em;text-indent:0}#sbo-rt-content .list1{font-size:100%;margin-bottom:0;margin-left:3.5em;text-align:left}#sbo-rt-content .listin{font-size:90%;margin-top:.5em;margin-bottom:0;margin-left:6em;text-align:left}#sbo-rt-content .list1in{font-size:90%;margin-top:.5em;margin-bottom:0;margin-left:6.3em;text-align:left}#sbo-rt-content ul.list-disc{list-style-type:disc;margin-left:1em;text-align:left}#sbo-rt-content p.listing{font-size:100%;text-indent:0;margin-top:1.5em;margin-bottom:1em}#sbo-rt-content div.Sidebar{font-size:100%;text-indent:0;margin-top:1.5em;margin-bottom:1em}#sbo-rt-content p.ListPara{font-size:100%;text-indent:0;margin-top:.5em;margin-bottom:0;margin-left:0;margin-right:0;text-align:left}#sbo-rt-content ol.list-roman{list-style-type:lower-roman;margin-left:1em;text-align:left}#sbo-rt-content div.table-centered{display:inline-block}#sbo-rt-content .table-center{margin-left:auto;margin-right:auto}#sbo-rt-content p.list-num{font-size:100%;margin-top:.5em;margin-bottom:.4em;margin-left:4.7em;text-indent:-1.7em;margin-right:1.2em;text-align:left}#sbo-rt-content p.list-num1{font-size:100%;margin-top:.5em;margin-bottom:.4em;margin-left:4.3em;text-indent:-2em;margin-right:1.2em;text-align:left}#sbo-rt-content p.box-center{font-weight:normal;font-size:100%;margin-top:1em;margin-bottom:1em;text-align:center;color:#8A8A8A}</style><script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9781484212608/chapter/9781484212615_Ch02.xhtml",
          "book_id": "9781484212608",
          "chapter_uri": "9781484212615_Ch02.xhtml",
          "position": 100.0,
          "user_uuid": "2503a136-a8d4-44da-ac19-74565cff32e9",
          "next_chapter_uri": "/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml"
        
      },
      title: "Pro React",
      author_list: "Cássio de Sousa Antonio",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false,
      show_ios_app_teaser: false
    };
    // ]]></script><script src="./Chapter 3_ Architecting Applications with Components - Pro React_files/modernizr.js"></script><script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

    
      window.PRIVACY_CONTROL_OVERRIDE = false;
    

    
      window.PRIVACY_CONTROL_SWITCH = true;
    

    
      window.PUBLISHER_PAGES = true;
    

      window.SBO = {
        "constants": {
          "SITB_ENDPOINT": "https://www.safaribooksonline.com/api/v2/sitb/"
        }
      };
  </script><link rel="canonical" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml"><meta name="description" content="CHAPTER 2 Inside the DOM Abstraction In the previous chapter, you saw that React abstracts away the DOM, providing a simpler programming model, better performance, and the possibility to render ... "><meta property="og:title" content="Chapter 2: Inside the DOM Abstraction"><meta itemprop="isPartOf" content="/library/view/pro-react/9781484212608/"><meta itemprop="name" content="Chapter 2: Inside the DOM Abstraction"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9781484212608/"><meta property="og:description" itemprop="description" content="CHAPTER 2 Inside the DOM Abstraction In the previous chapter, you saw that React abstracts away the DOM, providing a simpler programming model, better performance, and the possibility to render ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Apress"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9781484212608"><meta property="og:book:author" itemprop="author" content="Cássio de Sousa Antonio"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.cf5c9b7980e5.js"></script><![endif]--><noscript>&lt;meta http-equiv="refresh" content="0; url=/library/no-js/" /&gt;</noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '2503a136-a8d4-44da-ac19-74565cff32e9' });


ga('set', 'dimension1', 'B2B');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '2503a136-a8d4-44da-ac19-74565cff32e9');
  
    ga('set', 'dimension7', '001o000000aWOKCAA4');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="./Chapter 3_ Architecting Applications with Components - Pro React_files/vendor.d9d6ee5309e2.js"></script><script async="" src="./Chapter 3_ Architecting Applications with Components - Pro React_files/MathJax.js"></script><script src="./Chapter 3_ Architecting Applications with Components - Pro React_files/reader.245da5a3acad.js"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  scalefonts library nav-collapsed">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        




<a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 None safari-home nav-icn js-keyboard-nav-home"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>Safari Home Icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M4 9.9L4 9.9 4 18 16 18 16 9.9 10 4 4 9.9ZM2.6 8.1L2.6 8.1 8.7 1.9 10 0.5 11.3 1.9 17.4 8.1 18 8.7 18 9.5 18 18.1 18 20 16.1 20 3.9 20 2 20 2 18.1 2 9.5 2 8.7 2.6 8.1Z"></path><rect x="10" y="12" width="3" height="7"></rect><rect transform="translate(18.121320, 10.121320) rotate(-315.000000) translate(-18.121320, -10.121320) " x="16.1" y="9.1" width="4" height="2"></rect><rect transform="translate(2.121320, 10.121320) scale(-1, 1) rotate(-315.000000) translate(-2.121320, -10.121320) " x="0.1" y="9.1" width="4" height="2"></rect></g></svg><span>Safari Home</span></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recommendations icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M50 25C50 18.2 44.9 12.5 38.3 11.7 37.5 5.1 31.8 0 25 0 18.2 0 12.5 5.1 11.7 11.7 5.1 12.5 0 18.2 0 25 0 31.8 5.1 37.5 11.7 38.3 12.5 44.9 18.2 50 25 50 31.8 50 37.5 44.9 38.3 38.3 44.9 37.5 50 31.8 50 25ZM25 3.1C29.7 3.1 33.6 6.9 34.4 11.8 30.4 12.4 26.9 15.1 25 18.8 23.1 15.1 19.6 12.4 15.6 11.8 16.4 6.9 20.3 3.1 25 3.1ZM34.4 15.6C33.6 19.3 30.7 22.2 27.1 22.9 27.8 19.2 30.7 16.3 34.4 15.6ZM22.9 22.9C19.2 22.2 16.3 19.3 15.6 15.6 19.3 16.3 22.2 19.2 22.9 22.9ZM3.1 25C3.1 20.3 6.9 16.4 11.8 15.6 12.4 19.6 15.1 23.1 18.8 25 15.1 26.9 12.4 30.4 11.8 34.4 6.9 33.6 3.1 29.7 3.1 25ZM22.9 27.1C22.2 30.7 19.3 33.6 15.6 34.4 16.3 30.7 19.2 27.8 22.9 27.1ZM25 46.9C20.3 46.9 16.4 43.1 15.6 38.2 19.6 37.6 23.1 34.9 25 31.3 26.9 34.9 30.4 37.6 34.4 38.2 33.6 43.1 29.7 46.9 25 46.9ZM27.1 27.1C30.7 27.8 33.6 30.7 34.4 34.4 30.7 33.6 27.8 30.7 27.1 27.1ZM38.2 34.4C37.6 30.4 34.9 26.9 31.3 25 34.9 23.1 37.6 19.6 38.2 15.6 43.1 16.4 46.9 20.3 46.9 25 46.9 29.7 43.1 33.6 38.2 34.4Z"></path></g></svg><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>queue icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 29.2C25.4 29.2 25.8 29.1 26.1 28.9L48.7 16.8C49.5 16.4 50 15.5 50 14.6 50 13.7 49.5 12.8 48.7 12.4L26.1 0.3C25.4-0.1 24.6-0.1 23.9 0.3L1.3 12.4C0.5 12.8 0 13.7 0 14.6 0 15.5 0.5 16.4 1.3 16.8L23.9 28.9C24.2 29.1 24.6 29.2 25 29.2ZM7.3 14.6L25 5.2 42.7 14.6 25 24 7.3 14.6ZM48.7 22.4L47.7 21.9 25 34.2 2.3 21.9 1.3 22.4C0.5 22.9 0 23.7 0 24.7 0 25.6 0.5 26.5 1.3 26.9L23.9 39.3C24.2 39.5 24.6 39.6 25 39.6 25.4 39.6 25.8 39.5 26.1 39.3L48.7 26.9C49.5 26.5 50 25.6 50 24.7 50 23.7 49.5 22.9 48.7 22.4ZM48.7 32.8L47.7 32.3 25 44.6 2.3 32.3 1.3 32.8C0.5 33.3 0 34.1 0 35.1 0 36 0.5 36.9 1.3 37.3L23.9 49.7C24.2 49.9 24.6 50 25 50 25.4 50 25.8 49.9 26.1 49.7L48.7 37.3C49.5 36.9 50 36 50 35.1 50 34.1 49.5 33.3 48.7 32.8Z"></path></g></svg><span>Queue</span></a></li><li class="search"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" class="t-search-nav trigger nav-icn l0" data-dropdown-selector=".searchbox"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>search icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M31.3 0C20.9 0 12.5 8.4 12.5 18.8 12.5 22.5 13.6 25.9 15.4 28.8L1.2 42.9C-0.4 44.5-0.4 47.2 1.2 48.8 2 49.6 3.1 50 4.2 50 5.2 50 6.3 49.6 7.1 48.8L21.2 34.6C24.1 36.5 27.5 37.5 31.3 37.5 41.6 37.5 50 29.1 50 18.8 50 8.4 41.6 0 31.3 0ZM31.3 31.3C24.4 31.3 18.8 25.6 18.8 18.8 18.8 11.9 24.4 6.3 31.3 6.3 38.1 6.3 43.8 11.9 43.8 18.8 43.8 25.6 38.1 31.3 31.3 31.3Z"></path></g></svg><span>Search</span></a></li><li class="usermenu dropdown"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" class="trigger l0 nav-icn nav-dropdown"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>navigation arrow</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M0.1 12.5L9.7 3.1C9.8 3 9.9 3 10 3 10.1 3 10.2 3 10.3 3.1L19.9 12.5C20 12.5 20 12.6 20 12.8 20 12.9 20 13 19.9 13L17 15.9C16.9 16 16.8 16 16.7 16 16.5 16 16.4 16 16.4 15.9L10 9.7 3.6 15.9C3.6 16 3.5 16 3.3 16 3.2 16 3.1 16 3 15.9L0.1 13C0 12.9 0 12.8 0 12.7 0 12.7 0 12.6 0.1 12.5Z"></path></g></svg><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/history/" class="t-recent-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>recent items icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 0C11.2 0 0 11.2 0 25 0 38.8 11.2 50 25 50 38.8 50 50 38.8 50 25 50 11.2 38.8 0 25 0ZM6.3 25C6.3 14.6 14.6 6.3 25 6.3 35.4 6.3 43.8 14.6 43.8 25 43.8 35.4 35.4 43.8 25 43.8 14.6 43.8 6.3 35.4 6.3 25ZM31.8 31.5C32.5 30.5 32.4 29.2 31.6 28.3L27.1 23.8 27.1 12.8C27.1 11.5 26.2 10.4 25 10.4 23.9 10.4 22.9 11.5 22.9 12.8L22.9 25.7 28.8 31.7C29.2 32.1 29.7 32.3 30.2 32.3 30.8 32.3 31.3 32 31.8 31.5Z"></path></g></svg><span>History</span></a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 55" width="20" height="20" version="1.1" fill="#4A3C31"><desc>topics icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M25 55L50 41.262 50 13.762 25 0 0 13.762 0 41.262 25 55ZM8.333 37.032L8.333 17.968 25 8.462 41.667 17.968 41.667 37.032 25 46.538 8.333 37.032Z"></path></g></svg><span>Topics</span></a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 nav-icn t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20" height="20" version="1.1" fill="#4A3C31"><desc>tutorials icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z"></path></g></svg><span>Tutorials</span></a></li><li class="nav-offers flyout-parent"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" class="l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" width="20" height="20" version="1.1" fill="#4A3C31"><desc>offers icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M35.9 20.6L27 15.5C26.1 15 24.7 15 23.7 15.5L14.9 20.6C13.9 21.1 13.2 22.4 13.2 23.4L13.2 41.4C13.2 42.4 13.9 43.7 14.9 44.2L23.3 49C24.2 49.5 25.6 49.5 26.6 49L35.9 43.6C36.8 43.1 37.6 41.8 37.6 40.8L37.6 23.4C37.6 22.4 36.8 21.1 35.9 20.6L35.9 20.6ZM40 8.2C39.1 7.6 37.6 7.6 36.7 8.2L30.2 11.9C29.3 12.4 29.3 13.2 30.2 13.8L39.1 18.8C40 19.4 40.7 20.6 40.7 21.7L40.7 39C40.7 40.1 41.4 40.5 42.4 40L48.2 36.6C49.1 36.1 49.8 34.9 49.8 33.8L49.8 15.6C49.8 14.6 49.1 13.3 48.2 12.8L40 8.2 40 8.2ZM27 10.1L33.6 6.4C34.5 5.9 34.5 5 33.6 4.5L26.6 0.5C25.6 0 24.2 0 23.3 0.5L16.7 4.2C15.8 4.7 15.8 5.6 16.7 6.1L23.7 10.1C24.7 10.6 26.1 10.6 27 10.1ZM10.1 21.7C10.1 20.6 10.8 19.4 11.7 18.8L20.6 13.8C21.5 13.2 21.5 12.4 20.6 11.9L13.6 7.9C12.7 7.4 11.2 7.4 10.3 7.9L1.6 12.8C0.7 13.3 0 14.6 0 15.6L0 33.8C0 34.9 0.7 36.1 1.6 36.6L8.4 40.5C9.3 41 10.1 40.6 10.1 39.6L10.1 21.7 10.1 21.7Z"></path></g></svg><span>Offers &amp; Deals</span></a><ul class="flyout"><li><a href="https://www.safaribooksonline.com/oreilly-conferences/" class="l2 nav-icn"><span>Conferences</span></a></li><li><a href="https://www.safaribooksonline.com/oreilly-newsletters/" class="l2 nav-icn"><span>Newsletters</span></a></li></ul></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/003o000000ulHO3AAM/" class="t-highlights-nav l1 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 35" width="20" height="20" version="1.1" fill="#4A3C31"><desc>highlights icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M13.325 18.071L8.036 18.071C8.036 11.335 12.36 7.146 22.5 5.594L22.5 0C6.37 1.113 0 10.632 0 22.113 0 29.406 3.477 35 10.403 35 15.545 35 19.578 31.485 19.578 26.184 19.578 21.556 17.211 18.891 13.325 18.071L13.325 18.071ZM40.825 18.071L35.565 18.071C35.565 11.335 39.86 7.146 50 5.594L50 0C33.899 1.113 27.5 10.632 27.5 22.113 27.5 29.406 30.977 35 37.932 35 43.045 35 47.078 31.485 47.078 26.184 47.078 21.556 44.74 18.891 40.825 18.071L40.825 18.071Z"></path></g></svg><span>Highlights</span></a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 nav-icn None"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 53" width="20" height="20" version="1.1" fill="#4A3C31"><desc>settings icon</desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M44.6 29.6C44.7 28.6 44.8 27.5 44.8 26.5 44.8 25.5 44.7 24.4 44.6 23.4L49.6 19C50 18.8 50.1 18.3 49.9 17.9 48.9 14.7 47.1 11.7 44.9 9.1 44.6 8.8 44.2 8.7 43.8 8.8L37.4 11.1C35.8 9.8 34 8.7 32.1 8L30.9 1.4C30.8 0.9 30.4 0.6 30 0.5 26.7-0.2 23.3-0.2 20 0.5 19.6 0.6 19.2 0.9 19.1 1.4L17.9 8C16 8.7 14.1 9.8 12.6 11.1L6.2 8.8C5.8 8.7 5.4 8.8 5.1 9.1 2.9 11.7 1.1 14.7 0.1 17.9 -0.1 18.3 0 18.8 0.4 19L5.4 23.4C5.3 24.4 5.2 25.5 5.2 26.5 5.2 27.5 5.3 28.6 5.4 29.6L0.4 34C0 34.2-0.1 34.7 0.1 35.1 1.1 38.3 2.9 41.4 5.1 43.9 5.4 44.2 5.8 44.4 6.2 44.2L12.6 42C14.1 43.2 16 44.3 17.9 45L19.1 51.7C19.2 52.1 19.6 52.5 20 52.5 21.6 52.8 23.3 53 25 53 26.7 53 28.4 52.8 30 52.5 30.4 52.5 30.8 52.1 30.9 51.7L32.1 45C34 44.3 35.8 43.2 37.4 42L43.8 44.2C44.2 44.4 44.6 44.2 44.9 43.9 47.1 41.4 48.9 38.3 49.9 35.1 50.1 34.7 50 34.2 49.6 34L44.6 29.6ZM25 36.4C19.6 36.4 15.2 32 15.2 26.5 15.2 21 19.6 16.6 25 16.6 30.4 16.6 34.8 21 34.8 26.5 34.8 32 30.4 36.4 25 36.4Z"></path></g></svg><span>Settings</span></a></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Pro React
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input type="search" name="query" placeholder="Search inside this book..." autocomplete="off"></form><div class="search-archive-results"><div class="js-sitb-results-region"></div></div></li><li class="queue-control"><button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781484212608/chapter/9781484212615_Ch03.xhtml" data-for-analytics="9781484212608:9781484212615_Ch03.xhtml" aria-label="Add to Queue"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml&amp;text=Pro%20React&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Chapter%202%3A%20Inside%20the%20DOM%20Abstraction&amp;body=https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml%0D%0Afrom%20Pro%20React%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Chapter 2: Inside the DOM Abstraction</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch04.xhtml" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">Chapter 4: Sophisticated Interactions</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><p class="ChapterNumber"><a id="b978-1-4842-1260-8_3"></a>CHAPTER 3</p>
<p class="Chapimage"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/frontdot.jpg" alt="image" width="82" height="25" data-mfp-src="/library/view/pro-react/9781484212608/images/frontdot.jpg"></p>
<p class="ChapterTitle">Architecting Applications with Components</p>
<div><p class="noindent">The previous chapters provided an overview of React. You saw that React is all about bringing a component-based architecture to interface building. You understood the evolutionary approach of bringing HTML together with JavaScript to describe components and achieve separation of concerns not by separating technologies or languages, but by having discreet, isolated, reusable, and composable components.</p>
<p class="indent">This chapter will cover how to structure a complex user<a id="cXXX.51a"></a> interface made of nested components. You will see the importance of exposing a component API through propTypes, understand how data flows in a React application, and explore techniques on how to compose components.</p>
<p id="Sec1" class="Heading1">Prop Validation<a id="cXXX.75a"></a></p>
<p class="noindent">When creating components, remember that they can be composed into bigger components and reused (in the same project, in other projects, by other developers). Therefore, it is a good practice to make explicit in your components which props can be used, which ones are required, and which types of values they accept. This can be done by declaring propTypes. propTypes<a id="cXXX.68"></a> help document your components, which benefits future development in two ways.</p>
<ol class="OrderedList"><li>You can easily open up a component and check which props are required and what type they should be.</li><li>When things get messed up, React will give you an error message in the console, saying which props are wrong/missing and the render method that caused the problem.</li></ol><p class="indent">propTypes are defined as a class constructor property. For example, given this <span class="FontName1">Greeter</span> React component</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{ render }</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><br><b>class</b> <span class="FontName1">Greeter</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>h1</b><span class="FontName1">&gt;{this.props.salutation}&lt;/</span><b>h1</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><br><span class="FontName1">render(&lt;</span><b>Greeter</b> <span class="FontName1">salutation="Hello World" /&gt;, document.getElementById(’root’));</span></pre>
<p class="indent">the <i>salutation</i> prop needs to be a string and is required (you can’t render unless a salutation is provided). To achieve this, you have to define the propTypes as a class constructor property, like this:</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component,</span> <b>PropTypes</b> <span class="FontName1">}</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{ render }</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><br><b>class</b> <span class="FontName1">Greeter</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>h1</b><span class="FontName1">&gt;{this.props.salutation}&lt;/</span><b>h1</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><b>Greeter.propTypes =&nbsp;{</b><br>&nbsp;&nbsp;<b>salutation: PropTypes.string.isRequired</b><br><b>}</b><br><br><span class="FontName1">render(&lt;</span><b>Greeter</b> <span class="FontName1">salutation="Hello World" /&gt;, document.getElementById(’root’));</span></pre>
<p class="indent">If the requirements of the propTypes are not met when the component is instantiated, a <span class="FontName1">console.warn</span> will be logged. For example, if you try to render a Greeter component without any props</p>
<pre><span class="FontName1">React.render(&lt;Greeter /&gt;, document.getElementById(’root’));</span></pre>
<p class="noindent">the warning will be</p>
<div class="thinline">
<pre><span class="FontName1">Warning: Failed propType: Required prop `salutation` was not specified in `Greeter`.</span></pre></div>
<p class="indent">For optional props, simple leave the <span class="FontName1">.isRequired</span> off, in which case the prop type will only be checked by React if a value is provided.</p>
<p id="Sec2" class="Heading2">Default Prop Values</p>
<p class="noindent">You can also provide a default prop value<a id="cXXX.69"></a> in case none is provided. The syntax is similar: define a <span class="FontName1">defaultProps</span> object as a constructor property.</p>
<p class="indent">You could, for example, leave the prop <i>salutation</i> optional (by removing the <span class="FontName1">isRequired</span>) and give it a default value of “Hello World”:</p>
<pre><b>class</b> <span class="FontName1">Greeter</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>h1</b><span class="FontName1">&gt;{this.props.salutation}&lt;/</span><b>h1</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><br><span class="FontName1">Greeter.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">salutation: PropTypes.string</span><br><span class="FontName1">}</span><br><b>Greeter.defaultProps =&nbsp;{</b><br>&nbsp;&nbsp;<b>salutation: "Hello World"</b><br><b>}</b><br><br><span class="FontName1">render(&lt;</span><b>Greeter</b> <span class="FontName1">/&gt;, document.getElementById(’root’));</span></pre>
<p class="indent">Now, if no salutation prop is provided, your component will render a default “Hello World”. If a salutation is provided, though, it needs to be of type string.</p>
<p class="indent">As said earlier, you are not required to use propTypes in your application, but they provide a good way to describe the API of your component, and it is a good practice to always declare them.</p>
<p id="Sec3" class="Heading2">Built-in propType Validators</p>
<p class="noindent">React propTypes export a range of validators that can be used to make sure the data you receive is valid. By default, all of the propTypes in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Tab1" id="_Tab1">Tables 3-1</a> through <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Tab3" id="_Tab3">3-3</a> are optional, but you can chain with <span class="FontName1">isRequired</span> to make sure a warning is shown if the prop isn’t provided.</p>
<div class="Table" id="Tab1"><p class="TabCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Tab1">Table 3-1</a>.</span> JavaScript Primitives<a id="cXXX.70"></a> PropTypes</p>
<table border="0"><thead><tr class="header"><th valign="top"><p class="tab-left">Validator</p></th><th valign="top"><p class="tab-left">Description</p></th></tr></thead><tbody><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.array</span></p></td><td valign="top"><p class="tab-leftt">Prop must be an array.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.bool</span></p></td><td valign="top"><p class="tab-leftt">Prop must be a Boolean value (true/false).</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.func</span></p></td><td valign="top"><p class="tab-leftt">Prop must be a function.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.number</span></p></td><td valign="top"><p class="tab-leftt">Prop must be a number (or a value that can be parsed into a number).</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.object</span></p></td><td valign="top"><p class="tab-leftt">Prop must be an object.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.string</span></p></td><td valign="top"><p class="tab-leftt">Prop must be a string.</p></td></tr></tbody></table></div>
<div class="Table" id="Tab2"><p class="TabCapt"><span class="CaptNr">Table 3-2.</span> Combined Primitives PropTypes<a id="cXXX.71"></a></p>
<table border="0"><thead><tr class="header"><th valign="top"><p class="tab-left">Validator</p></th><th valign="top"><p class="tab-left">Description</p></th></tr></thead><tbody><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.oneOfType</span></p></td><td valign="top"><p class="tab-leftt">An object that could be one of many types, such as</p>
<p class="tab-leftt"><span class="FontName1">PropTypes.oneOfType([</span></p>
<p class="tab-leftt">&nbsp;&nbsp;<span class="FontName1">PropTypes.string,</span></p>
<p class="tab-leftt">&nbsp;&nbsp;<span class="FontName1">PropTypes.number,</span></p>
<p class="tab-leftt">&nbsp;&nbsp;<span class="FontName1">PropTypes.instanceOf(Message)</span></p>
<p class="tab-leftt"><span class="FontName1">])</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.arrayOf</span></p></td><td valign="top"><p class="tab-leftt">Prop must be an array of a certain type, such as</p>
<p class="tab-leftt"><span class="FontName1">PropTypes.arrayOf(PropTypes.number)</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.objectOf</span></p></td><td valign="top"><p class="tab-leftt">Prop must be an object with property values of a certain type, such as</p>
<p class="tab-leftt"><span class="FontName1">PropTypes.objectOf(PropTypes.number)</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.shape</span></p></td><td valign="top"><p class="tab-leftt">Prop must be an object taking on a particular shape. It needs the same set of properties, such as</p>
<p class="tab-leftt"><span class="FontName1">PropTypes.shape({</span></p>
<p class="tab-leftt">&nbsp;&nbsp;<span class="FontName1">color: PropTypes.string,</span></p>
<p class="tab-leftt">&nbsp;&nbsp;<span class="FontName1">fontSize: PropTypes.number</span></p>
<p class="tab-leftt"><span class="FontName1">})</span></p></td></tr></tbody></table></div>
<div class="Table" id="Tab3"><p class="TabCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Tab3">Table 3-3</a>.</span> Special PropTypes<a id="cXXX.72"></a></p>
<table border="0"><thead><tr class="header"><th valign="top"><p class="tab-left">Validator</p></th><th valign="top"><p class="tab-left">Description</p></th></tr></thead><tbody><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.node</span></p></td><td valign="top"><p class="tab-leftt">Prop can be of any value that can be rendered: numbers, strings, elements, or an array.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.element</span></p></td><td valign="top"><p class="tab-leftt">Prop must be a React element.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.instanceOf</span></p></td><td valign="top"><p class="tab-leftt">Prop must be instance of a given class (this uses JS’s <span class="FontName1">instanceof</span> operator.), such as <span class="FontName1">PropTypes.instanceOf(Message)</span>.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">PropTypes.oneOf</span></p></td><td valign="top"><p class="tab-leftt">Ensure that your prop is limited to specific values by treating it as an enum, like <span class="FontName1">PropTypes.oneOf([’News’, ’Photos’])</span>.</p></td></tr></tbody></table></div>
<p id="Sec4" class="Heading2">Kanban App<a id="cXXX.111a"></a>: Defining Prop Types</p>
<p class="noindent">The correct approach is to declare a component’s propTypes as soon as you create the component itself, but given that you just learned about them and their importance, let’s review all of the Kanban App’s components and declare its propTypes (as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar1" id="_FPar1">Listings 3-1</a> to <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar4" id="_FPar4">3-4</a>).</p>
<div class="Sidebar"><p class="listing"><a id="FPar1" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar1"><i><b>Listing 3-1</b></i></a>. PropTypes for the KanbanBoard Component<a id="cXXX.73"></a></p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component,</span> <b>PropTypes</b> <span class="FontName1">}</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">List</span> <b>from</b> <span class="FontName1">’./List’;</span><br><br><b>class</b> <span class="FontName1">KanbanBoard</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">};</span><br><b>KanbanBoard.propTypes =&nbsp;{</b><br>&nbsp;&nbsp;<b>cards: PropTypes.arrayOf(PropTypes.object)</b><br><b>};</b><br><br><b>export default</b> <span class="FontName1">KanbanBoard;</span></pre></div>
<div class="Sidebar"><p class="listing"><a id="FPar2"><b><i>Listing 3-2</i></b></a>. PropTypes for the List Component<a id="cXXX.68a"></a><a id="cXXX.74"></a></p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component,</span> <b>PropTypes</b> <span class="FontName1">}</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">Card</span> <b>from</b> <span class="FontName1">’./Card’;</span><br><br><b>class</b> <span class="FontName1">List</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">};</span><br><b>List.propTypes =&nbsp;{</b><br>&nbsp;&nbsp;<b>title: PropTypes.string.isRequired,</b><br>&nbsp;&nbsp;<b>cards: PropTypes.arrayOf(PropTypes.object)</b><br><b>};</b><br><br><span class="FontName1">export default List;</span></pre></div>
<div class="Sidebar"><p class="listing"><a id="FPar3"><b><i>Listing 3-3</i></b></a>. PropTypes for the Card Component<a id="cXXX.75"></a></p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component,</span> <b>PropTypes</b> <span class="FontName1">}</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">marked</span> <b>from</b> <span class="FontName1">’marked’;</span><br><b>import</b> <span class="FontName1">CheckList</span> <b>from</b> <span class="FontName1">’./CheckList’;</span><br><br><b>class</b> <span class="FontName1">Card</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor() {...}</span><br>&nbsp;&nbsp;<span class="FontName1">toggleDetails() {...}</span><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">};</span><br><b>Card.propTypes =&nbsp;{</b><br>&nbsp;&nbsp;<b>id: PropTypes.number,</b><br>&nbsp;&nbsp;<b>title: PropTypes.string,</b><br>&nbsp;&nbsp;<b>description: PropTypes.string,</b><br>&nbsp;&nbsp;<b>color: PropTypes.string,</b><br>&nbsp;&nbsp;<b>tasks: PropTypes.arrayOf(PropTypes.object)</b><br><b>};</b><br><br><span class="FontName1">export default Card;</span></pre></div>
<div class="Sidebar"><p class="listing"><a id="FPar4" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar4"><i><b>Listing 3-4</b></i></a>. PropTypes for the Checklist<a id="cXXX.76"></a> Component</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component,</span> <b>PropTypes</b> <span class="FontName1">}</span> <b>from</b> <span class="FontName1">’react’;</span><br><br><b>class</b> <span class="FontName1">CheckList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">};</span><br><b>CheckList.propTypes =&nbsp;{</b><br>&nbsp;&nbsp;<b>cardId: PropTypes.number,</b><br>&nbsp;&nbsp;<b>tasks: PropTypes.arrayOf(PropTypes.object)</b><br><b>};</b><br><br><span class="FontName1">export default CheckList;</span></pre></div>
<p id="Sec5" class="Heading2">Custom PropType Validators</p>
<p class="noindent">As mentioned, React offers a great suite of built-in propType validators that cover pretty much every basic use case, but there may still be some scenarios where one might need a more specific validator.</p>
<p class="indent">Validators are basically just functions that receive a list of properties, the name of the property to check, and the name of the component. The function must then return either nothing (if the tested prop was valid) or an instance of an Error suitable for the invalid prop.</p>
<p id="Sec6" class="Heading3">Kanban App: Defining a Custom PropType Validator</p>
<p class="noindent">In your Kanban app<a id="cXXX.103a"></a>, the Card component has a title, a description, and other properties. By way of an example, you’re going to write a validator that will warn if the card title is longer than 80 characters. The code is shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar5" id="_FPar5">Listing 3-5</a>, and a sample card failing the custom propType validator is represented in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig1" id="_Fig1">Figure 3-1</a>.</p>
<div class="Sidebar"><p class="listing"><a id="FPar5" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar5"><i><b>Listing 3-5</b></i></a>. Custom PropType Validator on the Card Component</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component, PropTypes }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">marked</span> <b>from</b> <span class="FontName1">’marked’;</span><br><b>import</b> <span class="FontName1">CheckList</span> <b>from</b> <span class="FontName1">’./CheckList’;</span><br><br><b>let titlePropType =&nbsp;(props, propName, componentName) =&gt; {</b><br>&nbsp;&nbsp;<b>if (props[propName]) {</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let value =&nbsp;props[propName];</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>if (typeof value !== ’string’ || value.length &gt; 80) {</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return new Error(</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>`${propName} in ${componentName}&nbsp;&nbsp;is longer than 80 characters`</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>&nbsp;&nbsp;<b>}</b><br><b>}</b><br><br><b>class</b> <span class="FontName1">Card</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor() {...}</span><br>&nbsp;&nbsp;<span class="FontName1">toggleDetails() {...}</span><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">}</span><br><span class="FontName1">Card.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">id: PropTypes.number,</span><br>&nbsp;&nbsp;<b>title: titlePropType,</b><br>&nbsp;&nbsp;<span class="FontName1">description: PropTypes.string,</span><br>&nbsp;&nbsp;<span class="FontName1">color: PropTypes.string,</span><br>&nbsp;&nbsp;<span class="FontName1">tasks: PropTypes.arrayOf(PropTypes.object)</span><br><span class="FontName1">};</span><br><br><span class="FontName1">export default Card;</span></pre></div>
<div class="Figure" id="Fig1"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-01.jpg" alt="9781484212615_Fig03-01.jpg" width="570" height="91" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-01.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig1">Figure 3-1</a>.</span> A new card failing the custom propType validation</p></div>
<div class="notepara"><p class="paraaftertitle1"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/sq.jpg" alt="Image" width="15" height="15" data-mfp-src="/library/view/pro-react/9781484212608/images/sq.jpg">&nbsp;<b>Note</b>&nbsp;&nbsp;In this sample code, you use the new JavaScript ES6 syntax for string interpolation. You can learn more about this and other ES6 language features used throughout this book in the online Appendix C.</p></div>
<p id="Sec7" class="Heading1">Component Composition<a id="cXXX.79a"></a> Strategies and Best Practices</p>
<p class="noindent">This section will cover strategies and best practices for creating React applications by composing components. You will discuss how to achieve state management, data fetching, and control over user interactions in a structured and organized way.</p>
<p id="Sec8" class="Heading2">Stateful and Pure Components<a id="cXXX.77"></a></p>
<p class="noindent">So far you’ve seen that components can have data as props and state.</p>
<ul class="bulleted"><li><b>Props</b> are a component’s configuration. They are received from above and immutable as far as the component receiving them is concerned.</li><li><b>State</b> starts with a default value defined in the component’s constructor and then suffers from mutations in time (mostly generated from user events). A component manages its own state internally, and every time the state changes, the component is rendered again.</li></ul><p class="indent">In React’s components, state is optional. In fact, in most React applications the components are split into two types: those that manage state (stateful components) and those that don’t have internal state and just deal with the display of data (pure components).</p>
<p class="indent">The goal of pure components is to write them so they only accept props and are responsible for rendering those props into a view. This makes it easier to reuse and test those components.</p>
<p class="indent">However, sometimes you need to respond to user input, a server request, or the passage of time. For this, you use state. Stateful components usually are higher on the component hierarchy and wrap one or more stateful or pure components.</p>
<p class="indent">It’s a good practice to keep most of an app’s components stateless. Having your application’s state scattered across multiple components makes it harder to track. It also reduces predictability because the way your application works becomes less transparent. There’s also the potential to introduce some very hard-to-untangle situations in your code.</p>
<p id="Sec9" class="Heading2">Which Components Should Be Stateful?</p>
<p class="noindent">Recognizing which components should own state is often the most challenging part for React newcomers to understand. When in doubt, follow this four-step checklist. For each piece of state in your application,</p>
<ul class="bulleted"><li>Identify every component that renders something based on that state.</li><li>Find a common owner component (a single component above all the components that need the state in the hierarchy).</li><li>Either the common owner or another component higher up in the hierarchy should own the state.</li><li>If you can’t find a component where it makes sense to own the state, create a new component simply to hold the state and add it somewhere in the hierarchy above the common owner component.</li></ul><p class="indent">To illustrate this concept, let’s build a very simple contact app<a id="cXXX.78a"></a><a id="cXXX.78"></a>, as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig2" id="_Fig2">Figure 3-2</a>.</p>
<div class="Figure" id="Fig2"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-02.jpg" alt="9781484212615_Fig03-02.jpg" width="440" height="202" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-02.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig2">Figure 3-2</a>.</span> The sample contacts app with search</p></div>
<p class="indent">The component hierarchy is</p>
<ul class="bulleted"><li><b>ContactsApp</b>: The main component
<ul class="list-disc"><li><b>SearchBar</b>: Shows an input field so the user can filter the contacts</li><li><b>ContactList</b>: Loops through data, creating a series of <span class="FontName1">ContactItem</span>s
<ul class="list-disc"><li><b>ContactItem</b>: Displays the contact data</li></ul></li></ul></li></ul><p class="indent">In the code, the contact list data is stored in a global variable. In a real app, the data would probably be fetched remotely, but for the sake of simplicity, it will be hard-coded on this example. <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar7" id="_FPar7">Listing 3-6</a> shows the complete code including the ContactsApp, SearchBar, ContactList, and ContactItem components (as well as their propTypes)<b>.</b></p>
<div class="Sidebar"><p class="listing"><a id="FPar7" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar7"><i><b>Listing 3-6</b></i></a>. ContacsApp Code<a id="cXXX.79"></a></p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component, PropTypes }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{ render }</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><br><span class="FontName1">// Main component. Renders a&nbsp;SearchBar and a&nbsp;ContactList</span><br><b>class</b> <span class="FontName1">ContactsApp</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>SearchBar</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ContactList</b> <span class="FontName1">contacts={this.props.contacts} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactsApp.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">contacts: PropTypes.arrayOf(PropTypes.object)</span><br><span class="FontName1">}</span><br><br><b>class</b> <span class="FontName1">SearchBar</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="search" placeholder="search" /&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><br><b>class</b> <span class="FontName1">ContactList extends Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{</span><b>this</b><span class="FontName1">.props.contacts.map(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">(contact) =&gt;</span> &lt;<b>ContactItem</b> <span class="FontName1">key</span>=<span class="FontName1">{contact.email}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">name={contact.name}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">email={contact.email} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactList.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">contacts: PropTypes.arrayOf(PropTypes.object)</span><br><span class="FontName1">}</span><br><br><b>class</b> <span class="FontName1">ContactItem</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>li</b><span class="FontName1">&gt;{this.props.name} -&nbsp;{this.props.email}&lt;/</span><b>li</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactItem.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">name: PropTypes.string.isRequired,</span><br>&nbsp;&nbsp;<span class="FontName1">email: PropTypes.string.isRequired,</span><br><span class="FontName1">}</span><br><br><span class="FontName1">let contacts =&nbsp;[</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Cassio Zen", email: "cassiozen@gmail.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Dan Abramov", email: "gaearon@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Pete Hunt", email: "floydophone@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Paul O’Shannessy", email: "zpao@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Ryan Florence", email: "rpflorence@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Sebastian Markbage", email: "sebmarkbage@here.com" },</span><br><span class="FontName1">]</span><br><br><span class="FontName1">render(&lt;</span><b>ContactsApp</b> <span class="FontName1">contacts={contacts} /&gt;, document.getElementById(’root’));</span></pre></div>
<p class="indent">At this moment, all of your application’s components are pure; they only render data received via props. However, you need to add the filter behavior to your app, and you will need to store mutable state to achieve that. Let’s run through the checklist to figure out where state in this application should live.</p>
<p class="indent">ContactList needs to filter the contacts based on state, and SearchBar needs to display the search text. The common owner component is ContactsApp.</p>
<p class="indent">It conceptually makes sense for the filter text to live as a state in ContactsApp. The ContactsApp in turn will pass the filter text down as props. The SearchBar component will use it as value for the input field and the ContactList will use it to filter the contacts. Let’s implement this component by component (as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar8" id="_FPar8">Listings 3-7</a> through <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar10" id="_FPar10">3-9</a>). In <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar9" id="_FPar9">Listing 3-8</a>, the SearchBar component<a id="cXXX.80"></a> will receive the <span class="FontName1">filterText</span> as a prop and set the input field value to this prop. The input field now is a controlled form component (as seen in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml">Chapter 2</a>). In <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar10">Listing 3-9</a>, the ContactList component also receives filterText as a prop and filters the contacts to show based on its value.</p>
<div class="Sidebar"><p class="listing"><a id="FPar8" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar8"><i><b>Listing 3-7</b></i></a>. Updated Stateful ContactsApp Component</p>
<pre><b>class</b> <span class="FontName1">ContactsApp</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<b>constructor(){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super();</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this.state={</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>filterText: ’’</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>};</b><br>&nbsp;&nbsp;<b>}</b><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>SearchBar filterText={this.state.filterText}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ContactList</b> <span class="FontName1">contacts={this.props.contacts}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>filterText={this.state.filterText}</b><span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactsApp.propTypes =&nbsp;{...}</span></pre></div>
<div class="Sidebar"><p class="listing"><a id="FPar9" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar9"><i><b>Listing 3-8</b></i></a>. The SearchBar Component</p>
<pre><b>class</b> <span class="FontName1">SearchBar</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="search" placeholder="search"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>value={this.props.filterText}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">// Don’t forget to add the new propType requirements</span><br><b>SearchBar.propTypes =&nbsp;{</b><br>&nbsp;&nbsp;<b>filterText: PropTypes.string.isRequired</b><br><b>}</b></pre></div>
<div class="Sidebar"><p class="listing"><a id="FPar10" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar10"><i><b>Listing 3-9</b></i></a>. The ContactList Component<a id="cXXX.81"></a></p>
<pre><b>class</b> <span class="FontName1">ContactList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let filteredContacts =&nbsp;this.props.contacts.filter(</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>(contact) =&gt; contact.name.indexOf(this.props.filterText) !== -1</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{</span><b>filteredContacts</b><span class="FontName1">.map(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">(contact) =&gt; &lt;</span><b>ContactItem</b> <span class="FontName1">key={contact.email}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">name={contact.name}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">email={contact.email} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">&lt;/</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span></pre></div>
<p class="indent">Now your application has only one stateful component on the top of the hierarchy and three pure components that display data received via props. The ContactList component filters the data to show based on the <span class="FontName1">filterText</span> prop (you can try right now by changing the ContactsApp’s <span class="FontName1">filterText</span> state on the code), but the user can’t type anything on the search field because it can’t change its state from inside the SearchBar component; the state is owned by the parent component.</p>
<p class="indent">In the next section, you will learn how child (pure) components can communicate back to parent (stateful) components.</p>
<p id="Sec10" class="Heading2">Data Flow and Component Communication</p>
<p class="noindent">In a React application, data flows down in the hierarchy of components: React makes this data flow<a id="cXXX.82"></a> explicit to make it easy to understand how your program works.</p>
<p class="indent">In non-trivial apps, though, nested child components need to communicate with the parent component. One method to achieve this is through callbacks passed by parent components as props.</p>
<p class="indent">Let’s use the ContactApp example to illustrate this. State belongs to the topmost ContactApp component and is passed down as props to SearchBar and ContactList.</p>
<p class="indent">You want to make sure that whenever the user changes the search form, you update the state to reflect the user input. Since components should only update their own state, ContactApp will pass a callback to SearchBar that will fire whenever the state should be updated. You can use the <span class="FontName1">onChange</span> event on the inputs to be notified of it. On the ContactsApp, you create a local function to change the filterText state and pass this function down as a prop to the searchBar (<a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar11" id="_FPar11">Listing 3-10</a>).</p>
<div class="Sidebar"><p class="listing"><a id="FPar11" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar11"><i><b>Listing 3-10</b></i></a>. Creating a local function<a id="cXXX.83"></a></p>
<pre><b>class</b> <span class="FontName1">ContactsApp</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor(){...}</span><br><br>&nbsp;&nbsp;<b>handleUserInput(searchTerm){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this.setState({filterText:searchTerm})</b><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>SearchBar</b> <span class="FontName1">filterText={this.state.filterText}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>onUserInput={this.handleUserInput.bind(this)}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ContactList</b> <span class="FontName1">contacts={this.props.contacts}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">filterText={this.state.filterText}/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactsApp.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">contacts: PropTypes.arrayOf(PropTypes.object)</span><br><span class="FontName1">}</span></pre></div>
<p class="indent">The SearchBar component receives the callback as a prop and calls on the onChange event<a id="cXXX.84"></a> of the input field (<a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar12" id="_FPar12">Listing 3-11</a>).</p>
<div class="Sidebar"><p class="listing"><a id="FPar12" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar12"><i><b>Listing 3-11</b></i></a>. Receiving the callback and calling in the onChange</p>
<pre><b>class</b> <span class="FontName1">SearchBar</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<b>handleChange(event){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this.props.onUserInput(event.target.value)</b><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="search"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">placeholder="search"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">value={this.props.filterText}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>onChange={this.handleChange.bind(this)}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">SearchBar.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<b>onUserInput: PropTypes.func.isRequired</b><span class="FontName1">,</span><br>&nbsp;&nbsp;<span class="FontName1">filterText: PropTypes.string.isRequired</span><br><span class="FontName1">}</span></pre></div>
<p class="indent">The search in action and the complete <a id="cXXX.85"></a>code are shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig3" id="_Fig3">Figure 3-3</a> and<a id="cXXX.86"></a> <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar13" id="_FPar13">Listing 3-12</a>.</p>
<div class="Figure" id="Fig3"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-03.jpg" alt="9781484212615_Fig03-03.jpg" width="400" height="105" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-03.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig3">Figure 3-3</a>.</span> The Contacts app’s filter in action</p></div>
<div class="Sidebar"><p class="listing"><a id="FPar13" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar13"><i><b>Listing 3-12</b></i></a>. The Complete Contact App Code</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component, PropTypes }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{ render }</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><br><span class="FontName1">// Main (stateful) component.</span><br><span class="FontName1">// Renders a&nbsp;SearchBar and a&nbsp;ContactList</span><br><span class="FontName1">// Passes down filterText state and handleUserInput callback as props</span><br><b>class</b> <span class="FontName1">ContactsApp</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super</b><span class="FontName1">();</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.state={</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">filterText:</span> ’’<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">};</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">handleUserInput(searchTerm){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({filterText:searchTerm})</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>SearchBar</b> <span class="FontName1">filterText={this.state.filterText}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">onUserInput={this.handleUserInput.bind(this)} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ContactList</b> <span class="FontName1">contacts={this.props.contacts}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">filterText={this.state.filterText}/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactsApp.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">contacts: PropTypes.arrayOf(PropTypes.object)</span><br><span class="FontName1">}</span><br><br><span class="FontName1">// Pure component that receives 2&nbsp;props from the parent</span><br><span class="FontName1">// filterText (string) and onUserInput (callback function)</span><br><b>class</b> <span class="FontName1">SearchBar</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">handleChange(event){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.props.onUserInput(event.target.value)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="search"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">placeholder="search"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">value={this.props.filterText}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">onChange={this.handleChange.bind(this)} /&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">SearchBar.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">onUserInput: PropTypes.func.isRequired,</span><br>&nbsp;&nbsp;<span class="FontName1">filterText: PropTypes.string.isRequired</span><br><span class="FontName1">}</span><br><br><span class="FontName1">// Pure component that receives both contacts and filterText as props</span><br><span class="FontName1">// The component is responsible for actualy filtering the</span><br><span class="FontName1">// contacts before displaying them.</span><br><span class="FontName1">// It’s considered a&nbsp;pure component because given the same</span><br><span class="FontName1">// contacts and filterText props the output will always be the same.</span> <br><b>class</b> <span class="FontName1">ContactList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">filteredContacts =</span> <b>this</b><span class="FontName1">.props.contacts.filter(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">(contact) =&gt; contact.name.indexOf(</span><b>this</b><span class="FontName1">.props.filterText) !== -1</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{filteredContacts.map(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">(contact) =&gt; &lt;</span><b>ContactItem</b> <span class="FontName1">key={contact.email}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">name={contact.name}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">email={contact.email} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">&lt;/</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactList.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">contacts: PropTypes.arrayOf(PropTypes.object),</span><br>&nbsp;&nbsp;<span class="FontName1">filterText: PropTypes.string.isRequired</span><br><span class="FontName1">}</span><br><br><b>class</b> <span class="FontName1">ContactItem</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>li</b><span class="FontName1">&gt;{this.props.name} -&nbsp;{this.props.email}&lt;/</span><b>li</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactItem.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">name: PropTypes.string.isRequired,</span><br>&nbsp;&nbsp;<span class="FontName1">email: PropTypes.string.isRequired</span><br><span class="FontName1">}</span><br><br><span class="FontName1">let contacts =&nbsp;[</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Cassio Zen", email: "cassiozen@gmail.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Dan Abramov", email: "gaearon@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Pete Hunt", email: "floydophone@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Paul O’Shannessy", email: "zpao@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Ryan Florence", email: "rpflorence@somewhere.com" },</span><br>&nbsp;&nbsp;<span class="FontName1">{ name: "Sebastian Markbage", email: "sebmarkbage@here.com" },</span><br><span class="FontName1">]</span><br><br><span class="FontName1">render(&lt;</span><b>ContactsApp</b> <span class="FontName1">contacts={contacts} /&gt;, document.getElementById(’root’));</span></pre></div>
<p id="Sec11" class="Heading1">Component Lifecycle</p>
<p class="noindent">When creating React components, it’s possible to declare methods that will be automatically called in certain occasions throughout the lifecycle of the component. Understanding the role that each component lifecycle<a id="cXXX.89a"></a> method plays and the order in which they are invoked will enable you to perform certain actions when a component is created or destroyed. It also gives you the opportunity to react to props or state changes accordingly.</p>
<p class="indent">Moreover, an implicit knowledge about the lifecycle methods is also necessary for performance optimizations (covered in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch07.xhtml">Chapter 7</a>) and to organize your components in a Flux architecture (covered in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch06.xhtml">Chapter 6</a>).</p>
<p id="Sec12" class="Heading2">Lifecycle Phases and Methods</p>
<p class="noindent">To get a clear idea of the lifecycle, you need to differentiate between the initial component creation phase, state and props changes, triggered updates, and the component’s unmouting phase. <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig4" id="_Fig4">Figures 3-4</a> to <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig7" id="_Fig7">3-7</a> demonstrate which methods are called on each phase.
<a id="cXXX.87"></a>
<a id="cXXX.88"></a></p>
<div class="Figure" id="Fig4"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-04.jpg" alt="9781484212615_Fig03-04.jpg" width="690" height="343" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-04.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig4">Figure 3-4</a>.</span> Lifecycle methods invoked on the mounting cycle</p></div>
<div class="Figure" id="Fig5"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-05.jpg" alt="9781484212615_Fig03-05.jpg" width="690" height="122" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-05.jpg"></p>
<p class="FigCapt"><span class="CaptNr">Figure 3-5.</span> Lifecycle method invoked on the unmounting cycle</p></div>
<div class="Figure" id="Fig6"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-06.jpg" alt="9781484212615_Fig03-06.jpg" width="690" height="407" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-06.jpg"></p>
<p class="FigCapt"><span class="CaptNr">Figure 3-6.</span> Lifecycle methods invoked when the props of a component<a id="cXXX.89"></a> change</p></div>
<div class="Figure" id="Fig7"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-07.jpg" alt="9781484212615_Fig03-07.jpg" width="600" height="364" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-07.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig7">Figure 3-7</a>.</span> Lifecycle methods invoked when the component’s state change</p></div>
<p id="Sec13" class="Heading2">Lifecycle Functions in Practice: Data Fetching</p>
<p class="noindent">To illustrate the usage of lifecycle methods in practice, imagine you want to change your last Contacts application to fetch the contacts data remotely. Data fetching<a id="cXXX.90"></a> is not really a React subject; it’s just plain JavaScript, but the important aspect to notice is that you do have to fetch the data on a specific lifecycle of the component, the <span class="FontName1">componentDidMount</span> lifecycle method.</p>
<p class="indent">Since this chapter is about strategies and good practices for component composition, it is also worth noting that you should avoid adding data fetching logic to a component that already has other responsibilities. A good practice, instead, is to create a new stateful component whose single responsibility is communicating with the remote API, and passing data and callbacks down as props. Some people call this type of component a <i>container component</i>.</p>
<p class="indent">You will use the idea of a container component in your Contacts app, so instead of adding the data-fetching logic to the existing <span class="FontName1">ContactsApp</span> component, you will create a new component called <span class="FontName1">ContactsAppContainer</span> on top of it. The old <span class="FontName1">ContactsApp</span> won’t be changed in any way. It will continue to receive data via props.</p>
<div class="notepara"><p class="paraaftertitle1"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/sq.jpg" alt="Image" width="15" height="15" data-mfp-src="/library/view/pro-react/9781484212608/images/sq.jpg">&nbsp;<b>Note</b>&nbsp;&nbsp;In this sample code, you use the new <span class="FontName1">window.fetch</span> function, which is an easier way to make web requests and handle responses than using <span class="FontName1">XMLHttpRequest</span>. At the time of this writing, only Chrome and Firefox support this new standard, so install and import the <span class="FontName1">whatwg-fetch</span> polyfill from <span class="FontName1">npm</span>. (Polyfill is browser fallback that allows specific functionality to work in browsers that do not have the support for that functionality built in.)</p>
<pre><span class="FontName1">npm install --save whatwg-fetch</span></pre></div>
<p class="indent">Let’s start by moving the hard-coded data to a json file (the json file must be in the <span class="FontName1">public</span> or <span class="FontName1">static</span> folder, so it will be served by the development server), as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig8" id="_Fig8">Figure 3-8</a>. Your project folder structure may vary; the important thing to notice is that the file is in the <span class="FontName1">public</span> or <span class="FontName1">static</span> folder that will be served by the web server.</p>
<div class="Figure" id="Fig8"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-08.jpg" alt="9781484212615_Fig03-08.jpg" width="520" height="448" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-08.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig8">Figure 3-8</a>.</span> The new contacts.json file</p></div>
<p class="indent">The new <span class="FontName1">ContactsAppContainer</span> component is shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar15" id="_FPar15">Listing 3-13</a>. No other components were changed, except that instead of rendering <span class="FontName1">ContactsApp</span> you now render <span class="FontName1">ContactsAppContainer</span><a id="cXXX.91"></a> to the document (as shown in the last lines of the listing).</p>
<div class="Sidebar"><p class="listing"><a id="FPar15" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar15"><i><b>Listing 3-13</b></i></a>. The New ContactsAppContainer</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component, PropTypes }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{ render }</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><b>import ’whatwg-fetch’;</b><br><br><b>class ContactsAppContainer extends Component {</b><br>&nbsp;&nbsp;<b>constructor(){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super();</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this.state={</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>contacts: []</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>};</b><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<b>componentDidMount(){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>fetch(’./contacts.json’)</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>.then((response) =&gt; response.json())</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>.then((responseData) =&gt; {</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this.setState({contacts: responseData});</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>})</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>.catch((error) =&gt; {</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>console.log(’Error fetching and parsing data’, error);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>});</b><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<b>render(){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return (</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>&lt;ContactsApp contacts={this.state.contacts} /&gt;</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>);</b><br>&nbsp;&nbsp;<b>}</b><br><b>}</b><br><br><span class="FontName1">// No changes in any of the components bellow</span><br><b>class</b> <span class="FontName1">ContactsApp</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor(){...}</span><br>&nbsp;&nbsp;<span class="FontName1">handleUserInput(searchTerm){...}</span><br>&nbsp;&nbsp;<span class="FontName1">render(){...}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactsApp.propTypes =&nbsp;{...}</span><br><br><b>class</b> <span class="FontName1">SearchBar</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">handleChange(event){...}</span><br>&nbsp;&nbsp;<span class="FontName1">render(){...}</span><br><span class="FontName1">}</span><br><span class="FontName1">SearchBar.propTypes =&nbsp;{...}</span><br><br><b>class</b> <span class="FontName1">ContactList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render(){...}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactList.propTypes =&nbsp;{...}</span><br><br><b>class</b> <span class="FontName1">ContactItem</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">}</span><br><span class="FontName1">ContactItem.propTypes =&nbsp;{...}</span><br><br><span class="FontName1">// You now render ContactAppContainer, instead of ContactsApp</span><br><b>render(&lt;ContactsAppContainer /&gt;, document.getElementById(’root’));</b></pre></div>
<p class="indent">That’s all for remote data fetching. If you reload the Contacts app in the browser, it will look like nothing has changed, but underneath it is now loading the contacts data from an external source.</p>
<p id="Sec14" class="Heading1">A Brief Talk About Immutability<a id="cXXX.94a"></a></p>
<p class="noindent">React provides a <span class="FontName1">setState</span> method<a id="cXXX.92"></a> to make changes to the component internal state. Be careful to always use the <span class="FontName1">setState</span> method to update the state of your component’s UI and never manipulate <span class="FontName1">this.state</span> directly. As a rule of thumb, treat <span class="FontName1">this.state</span> as if it were immutable.</p>
<p class="indent">There are different reasons for this. For one, by manipulating <span class="FontName1">this.state</span> directly you are circumventing React’s state management, which not only works against the React paradigm but can also be potentially dangerous because calling <span class="FontName1">setState()</span> afterwards may replace the mutation you made. Furthermore, manipulating <span class="FontName1">this.state</span> directly minimizes the possibilities for future performance improvements in the application.</p>
<p class="indent">You will learn about performance improvements in later chapters but in many cases it deals with object comparison and checking weather a <span class="FontName1">JavaScript</span> object has changed or not. As it turns out, this is a pretty expensive operation in JavaScript that can generate a lot of overhead, but there’s a simpler and faster way: if any time an object is changed it’s replaced instead edited in place, then the check is orders of magnitude faster (because you can simply compare object references, such as object1 === object2).</p>
<p class="indent">That’s the basic idea of <i>immutability</i>. Instead of changing an object, replace it.</p>
<p id="Sec15" class="Heading2">Immutability in Plain JavaScript<a id="cXXX.93"></a></p>
<p class="noindent">The main idea behind immutability is just to replace the object instead of changing it, and while this is absolutely possible in plain JavaScript, it’s not the norm. If you’re not careful, you may unintentionally mutate objects directly instead of replacing them. For example, let’s say you have this stateful component that displays data about a voucher for an airline travel (the <span class="FontName1">render</span> method is omitted in this example because you are only investigating the component’s state):</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{ render }</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><br><b>class</b> <span class="FontName1">Voucher</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super</b><span class="FontName1">(...arguments)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.state =&nbsp;{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">passengers:[</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">’Simmon, Robert A.’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">’Taylor, Kathleen R.’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">],</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">ticket:{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">company: ’Dalta’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">flightNo: ’0990’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">departure: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">airport: ’LAS’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">time: ’2016-08-21T10:00:00.000Z’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">},</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">arrival: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">airport: ’MIA’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">time: ’2016-08-21T14:41:10.000Z’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">},</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">codeshare: [</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{company:’GL’, flightNo:’9840’},</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{company:’TM’, flightNo:’5010’}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">]</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">render() {...}</span><br><span class="FontName1">}</span></pre>
<p class="indent">Now, suppose you want to add a passenger to the <span class="FontName1">passengers</span> array. If you’re not careful, you may unintentionally mutate the component state directly. For example,</p>
<pre><b>let</b> <span class="FontName1">updatedPassengers =</span> <b>this</b><span class="FontName1">.state.passengers;</span><br><span class="FontName1">updatedPassengers.push(’Mitchell, Vincent M.’);</span><br><b>this</b><span class="FontName1">.setState({passengers:updatedPassengers});</span></pre>
<p class="indent">The problem in this sample code, as you may have guessed, is that in JavaScript, objects and arrays are passed by reference. This means that when you say <span class="FontName1">updatedPassengers=this.state.passengers</span> you’re not making a copy of the array; you are just creating a new reference to the same array that is in the current component’s state. Furthermore, by using the array method <span class="FontName1">push</span>, you end up mutating its state directly.</p>
<p class="indent">To create actual array copies in JavaScript, you need to use non-destructive methods, that is, methods that will return an array with the desired mutations instead of actually changing the original one. <span class="FontName1">map</span>, <span class="FontName1">filter</span>, and <span class="FontName1">concat</span> are just a few examples of non-destructive array methods. Let’s reapproach the earlier problem of adding a new passenger to the array, this time using the Array’s <span class="FontName1">concat</span> method:</p>
<pre><span class="FontName1">// updatedPassengers is a&nbsp;new array, returned from</span> <span class="FontName1">concat</span><br><b>let</b> <span class="FontName1">updatedPassengers =</span> <b>this</b><span class="FontName1">.state.passengers.concat(’Mitchell, Vincent M.’);</span><br><b>this</b><span class="FontName1">.setState({passengers:updatedPassengers});</span></pre>
<p class="indent">There are also alternatives for generating new objects with mutations in JavaScript, like using <span class="FontName1">Object.assign. Object.assign</span> works by merging all properties of all given objects to the target object:</p>
<pre><span class="FontName1">Object.assign(target, source_1, ..., source_n)</span></pre>
<p class="indent">It first copies all enumerable properties of source 1 to the target, then those of source_2, etc. For example, to change the <span class="FontName1">flightNo</span> on the ticket state key, you could do this:</p>
<pre><span class="FontName1">// updatedTicket is a&nbsp;new object with the original properties of this.state.ticket</span><br><span class="FontName1">// merged with the new flightNo.</span><br><b>let</b> <span class="FontName1">updatedTicket =&nbsp;Object.assign({}, this.state.ticket, {flightNo:’1010’});</span><br><b>this</b><span class="FontName1">.setState({ticket:updatedTicket});</span></pre>
<div class="notepara"><p class="paraaftertitle1"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/sq.jpg" alt="Image" width="15" height="15" data-mfp-src="/library/view/pro-react/9781484212608/images/sq.jpg">&nbsp;<b>Note</b>&nbsp;&nbsp;At the time of this writing, only Chrome and Firefox supported the new method <span class="FontName1">Object.assign</span>, but the good news is that Babel (the ES6 compiler you’re using together with Webpack) already provides the polyfill for other browsers. All you need to do is install with <span class="FontName1">’npm install --save babel-polyfill’</span> and import it with <span class="FontName1">import ’babel-polyfill’</span>.</p></div>
<p id="Sec16" class="Heading2">Nested Objects</p>
<p class="noindent">Although an array’s non-destructive methods and <span class="FontName1">Object.assign</span> will do the job on most cases, it gets really tricky if your state contains nested objects<a id="cXXX.94"></a> or arrays. This is because of a characteristic of the JavaScript language: objects and arrays are passed by reference, and neither the array’s non-destructive methods nor <span class="FontName1">Object.assign</span> make deep copies. In practice, this means the the nested objects and arrays in your newly returned object will only be references to the same objects and arrays on the old object.</p>
<p class="indent">Let’s see this in practice, given the ticket object you were working on:</p>
<pre><b>let</b> <span class="FontName1">originalTicket={</span><br>&nbsp;&nbsp;<span class="FontName1">company: ’Dalta’,</span><br>&nbsp;&nbsp;<span class="FontName1">flightNo: ’0990’,</span><br>&nbsp;&nbsp;<span class="FontName1">departure: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">airport: ’LAS’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">time: ’2016-08-21T10:00:00.000Z’</span><br>&nbsp;&nbsp;<span class="FontName1">},</span><br>&nbsp;&nbsp;<span class="FontName1">arrival: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">airport: ’MIA’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">time: ’2016-08-21T14:41:10.000Z’</span><br>&nbsp;&nbsp;<span class="FontName1">},</span><br>&nbsp;&nbsp;<span class="FontName1">codeshare: [</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{company:’GL’, flightNo:’9840’},</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{company:’TM’, flightNo:’5010’}</span><br>&nbsp;&nbsp;<span class="FontName1">]</span><br><span class="FontName1">}</span></pre>
<p class="indent">If you create a ticket object with the <span class="FontName1">Object.assign</span>, like</p>
<pre><b>let</b> <span class="FontName1">newTicket =&nbsp;Object.assign({}, originalTicket, {flightNo ’5690’}}</span></pre>
<p class="indent">You will end up with two objects in memory, as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig9" id="_Fig9">Figure 3-9</a>.</p>
<div class="Figure" id="Fig9"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-09.jpg" alt="9781484212615_Fig03-09.jpg" width="600" height="83" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-09.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig9">Figure 3-9</a>.</span> Note that originalTicket and newTicket have different flightNo properties</p></div>
<p class="indent">However, given the default JavaScript behavior of passing arrays and objects by reference, the departure and arrival objects on <span class="FontName1">newTicket</span> aren’t separate copies; they’re references to the same <span class="FontName1">originalTicket</span> object. If you try to change the arrival object on <span class="FontName1">newTicket</span>, for example,</p>
<pre><span class="FontName1">newTicket.arrival.airport="MCO"</span></pre>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig10" id="_Fig10">Figure 3-10</a> shows both object representations now.</p>
<div class="Figure" id="Fig10"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-10.jpg" alt="9781484212615_Fig03-10.jpg" width="690" height="192" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-10.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig10">Figure 3-10</a>.</span> originalTicket and newTicket arrival keys references the same object</p></div>
<p class="indent">Again, this has nothing to do with React; it’s just the default JavaScript behavior, but this default behavior can and will impact React if you want to mutate a component state with nested objects. You could try making a deep clone of the original object, but this isn’t a good option because it is expensive in performance and even impossible to do in some cases. The good news is that there is a simple solution: the React add-ons package provides a utility function (called immutability helper) that helps update more complex and nested models.</p>
<p id="Sec17" class="Heading2">React Immutability Helper</p>
<p class="noindent">React’s add-on package provides an immutability helper<a id="cXXX.95"></a> called <span class="FontName1">update</span>. The <span class="FontName1">update</span> function<a id="cXXX.73z"></a> works on regular JavaScript objects and arrays<a id="cXXX.96"></a> and helps manipulates these objects as if they were immutable: instead of actually changing the object, it always return a new, mutated object.</p>
<p class="indent">To begin with, you’ll need to install and require the library:</p>
<pre><span class="FontName1">npm install –save react-addons-update</span></pre>
<p class="indent">Then, in your javascript file, import is using</p>
<pre><b>import update from ’react-addons-update’;</b></pre>
<p class="indent">The <span class="FontName1">update</span> method accepts two parameters<a id="cXXX.97"></a>. The first one is the object or array that you want to update. The second parameter is an object that describes WHERE the mutation should take place and WHAT kind of mutation you want to make. So, given this simple object:</p>
<pre><b>let</b> <span class="FontName1">student =&nbsp;{name:’John Caster’, grades:[’A’,’C’,’B’]}</span></pre>
<p class="indent">to create a copy of this object with a new, updated grade, the syntax for <span class="FontName1">update</span> is</p>
<pre><b>let</b> <span class="FontName1">newStudent =&nbsp;update(student, {grades:{$push: [’A’]}})</span></pre>
<p class="indent">The object <span class="FontName1">{grades:{$push: [’A’]}}</span> informs, from left to right, that the update function<a id="cXXX.94b"></a> should</p>
<ol class="OrderedList"><li>Locate the key grades (“where” the mutation will take place).</li><li>Push a new value to the array (“what” kind of mutation should happen).</li></ol><p class="indent">If you want to completely change the array, you use the command <span class="FontName1">$set</span> instead of <span class="FontName1">$push</span>:</p>
<pre><b>let</b> <span class="FontName1">newStudent =&nbsp;update(student, {grades:{$set: [’A’,’A’,’B’]}})</span></pre>
<p class="indent">There’s no limit to the amount of nesting you can do. Let’s head back to your voucher ticket object, where you were having trouble creating a new object with a different arrival information<a id="cXXX.98"></a>. The original object was</p>
<pre><b>let</b> <span class="FontName1">originalTicket={</span><br>&nbsp;&nbsp;<span class="FontName1">company: ’Dalta’,</span><br>&nbsp;&nbsp;<span class="FontName1">flightNo: ’0990’,</span><br>&nbsp;&nbsp;<span class="FontName1">departure: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">airport: ’LAS’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">time: ’2016-08-21T10:00:00.000Z’</span><br>&nbsp;&nbsp;<span class="FontName1">},</span><br>&nbsp;&nbsp;<span class="FontName1">arrival: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">airport: ’MIA’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">time: ’2016-08-21T14:41:10.000Z’</span><br>&nbsp;&nbsp;<span class="FontName1">},</span><br>&nbsp;&nbsp;<span class="FontName1">codeshare: [</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{company:’GL’, flightNo:’9840’},</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{company:’TM’, flightNo:’5010’}</span><br>&nbsp;&nbsp;<span class="FontName1">]</span><br><span class="FontName1">}</span></pre>
<p class="indent">The information you want to change (airport) is nested three levels deep. In React’s <span class="FontName1">update</span> addon, all you need to do is keep nesting objects with their names on the objects that describe the mutation:</p>
<pre><b>let</b> <span class="FontName1">newTicket =&nbsp;update(originalTicket, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">arrival: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">airport: {$set: ’MCO’}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">});</span></pre>
<p class="indent">Now only the new <span class="FontName1">Ticket</span> has the arrival airport set to “MCO”. The original ticket maintains the original arrival airport, as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig11" id="_Fig11">Figure 3-11</a>.</p>
<div class="Figure" id="Fig11"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-11.jpg" alt="9781484212615_Fig03-11.jpg" width="690" height="192" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-11.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig11">Figure 3-11</a>.</span> originalTicket and newTicket<a id="cXXX.99"></a> now don’t share the same arrival nested object</p></div>
<p id="Sec18" class="Heading3">Array Indexes</p>
<p class="noindent">It’s also possible to use array indexes<a id="cXXX.100"></a> to find WHERE a mutation should happen. For example, if you want to mutate the first codeshare object (the array elopement at index 0),</p>
<pre><b>let</b> <span class="FontName1">newTicket =&nbsp;update(originalTicket,{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">codeshare: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>0</b><span class="FontName1">: {&nbsp;$set: {company:’AZ’, flightNo:’7320’} }</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">});</span></pre>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Fig12" id="_Fig12">Figure 3-12</a> shows the different objects with the <span class="FontName1">newTicket</span> array mutated.</p>
<div class="Figure" id="Fig12"><p class="img"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/9781484212615_Fig03-12.jpg" alt="9781484212615_Fig03-12.jpg" width="690" height="226" data-mfp-src="/library/view/pro-react/9781484212608/images/9781484212615_Fig03-12.jpg"></p>
<p class="FigCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Fig12">Figure 3-12</a>.</span> Changes by array index using React’s immutability helpers</p></div>
<p id="Sec19" class="Heading3">Available Commands</p>
<p class="noindent">The available commands<a id="cXXX.101"></a> to determinate “what” kind of mutation should happen are shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#Tab4" id="_Tab4">Table 3-4</a>.</p>
<div class="Table" id="Tab4"><p class="TabCapt"><span class="CaptNr"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_Tab4">Table 3-4</a>.</span> React Immutability Helper Commands</p>
<table border="0"><thead><tr class="header"><th valign="top"><p class="tab-left">Command</p></th><th valign="top"><p class="tab-left">Description</p></th></tr></thead><tbody><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">$push</span></p></td><td valign="top"><p class="tab-leftt">Similar to Array’s <span class="FontName1">push</span>, it adds one or more elements to the end of an array. Example:</p>
<p class="tab-leftt"><span class="FontName1">let initialArray = [1, 2, 3];</span></p>
<p class="tab-leftt"><span class="FontName1">let newArray = update(initialArray, {$push: [4]});</span></p>
<p class="tab-leftt"><span class="FontName1">// =&gt; [1, 2, 3, 4]</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">$unshift</span></p></td><td valign="top"><p class="tab-leftt">Similar to Array’s <span class="FontName1">unshift</span>, it adds one or more elements to the beginning of an array. Example:</p>
<p class="tab-leftt"><span class="FontName1">let initialArray = [1, 2, 3];</span></p>
<p class="tab-leftt"><span class="FontName1">let newArray = update(initialArray, {$unshift: [0]});</span></p>
<p class="tab-leftt"><span class="FontName1">// =&gt; [0,1, 2, 3]</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">$splice</span></p></td><td valign="top"><p class="tab-leftt">Similar to Array’s splice, it changes the content of an array by removing and/or adding new elements. The main syntactical difference here is that you should provide an array of arrays as a parameter, each individual array containing the splice parameters to operate on the array. Example:</p>
<p class="tab-leftt"><span class="FontName1">let initial Array = [1, 2, ’a’];</span></p>
<p class="tab-leftt"><span class="FontName1">let newArray = update(initialArray, {$splice: [[2,1,3,4]]});</span></p>
<p class="tab-leftt"><span class="FontName1">// =&gt; [1, 2, 3, 4]</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">$set</span></p></td><td valign="top"><p class="tab-leftt">Replace the target entirely.</p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">$merge</span></p></td><td valign="top"><p class="tab-leftt">Merge the keys of the given object with the target. Example:</p>
<p class="tab-leftt"><span class="FontName1">let ob. = {a: 5, b: 3};</span></p>
<p class="tab-leftt"><span class="FontName1">let newObj = update(obj, {$merge: {b: 6, c: 7}});</span></p>
<p class="tab-leftt"><span class="FontName1">// =&gt; {a: 5, b: 6, c: 7}</span></p></td></tr><tr class="noclass"><td valign="top"><p class="tab-leftt"><span class="FontName1">$apply</span></p></td><td valign="top"><p class="tab-leftt">Pass in the current value to the given function and update it with the new returned value. Example:</p>
<p class="tab-leftt"><span class="FontName1">let obj = {a: 5, b: 3};</span></p>
<p class="tab-leftt"><span class="FontName1">let newObj = update(obj, {b: {$apply: (value) =&gt; value*2 }});</span></p>
<p class="tab-leftt"><span class="FontName1">// =&gt; {a: 5, b: 6}</span></p></td></tr></tbody></table></div>
<p id="Sec20" class="Heading1">Kanban App: Adding (a Little) Complexity</p>
<p class="noindent">To put all the new knowledge about components composition and state management in practice, you will connect the Kanban App Connect to an external API. You will fetch all the application’s data from the server and manipulate tasks (delete, create, and toggle).</p>
<p id="Sec22" class="Heading3">Fetching the Initial Cards from the External API</p>
<p class="noindent">You will start by creating a new component at the top of your hierarchy. This container component will be used for data fetching/persistence. Create a new file named <span class="FontName1">KanbanBoardContainer.js</span><a id="cXXX.102"></a> with a basic React component structure (as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar17" id="_FPar17">Listing 3-14</a>).</p>
<div class="Sidebar"><p class="listing"><a id="FPar17" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar17"><i><b>Listing 3-14</b></i></a>. The New KanbanBoardContainer.js</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component }</span> <b>from</b> ’react’<span class="FontName1">;</span><br><b>import</b> <span class="FontName1">KanbanBoard</span> <b>from</b> ’./KanbanBoard’<span class="FontName1">;</span><br><br><b>class</b> <span class="FontName1">KanbanBoardContainer</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super</b><span class="FontName1">(...arguments);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.state =&nbsp;{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">cards:[],</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">};</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>KanbanBoard</b> <span class="FontName1">cards={cards} /&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><br><span class="FontName1">export default KanbanBoardContainer;</span></pre></div>
<p class="indent">In the sequence, you fetch the data from the Kanban API Server. As you did earlier in this chapter, you use the new <span class="FontName1">window.fetch</span> function available on the latest generation of browsers. To make sure your app will run on other browsers as well, install the <span class="FontName1">fetch polyfill</span> from <span class="FontName1">npm</span> and save it as a dependency of the project:</p>
<pre><span class="FontName1">npm install --save whatwg-fetch</span></pre>
<p class="indent">For convenience, an online API for testing is provided at <span class="FontName1"><a href="http://kanbanapi.pro-ract.com/">http://kanbanapi.pro-ract.com</a></span>.</p>
<p class="indent">If you prefer to run locally, you can download the Kanban API Server from <span class="FontName1"><a href="http://www.apress.com/">www.apress.com</a></span> or from the book’s github page at <span class="FontName1"><a href="https://github.com/pro-react">https://github.com/pro-react</a></span>.</p>
<p class="indent">The only difference between the online API at <span class="FontName1">kanbanapi.pro-react.com</span> and the API Server is that to use the former you need to pass an authorization<a id="cXXX.103"></a> header (so the server can uniquely identify you and serve your own cards and tasks). The authorization can be any string that uniquely identifies your app or yourself (such a generic combination of characters or your e-mail address, for example). In both cases, a standard set of cards and tasks are already available on your first use so you can start testing immediately.</p>
<div class="notepara"><p class="paraaftertitle1"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/sq.jpg" alt="Image" width="15" height="15" data-mfp-src="/library/view/pro-react/9781484212608/images/sq.jpg">&nbsp;<b>Note</b>&nbsp;&nbsp;The online Kanban rest API at <span class="FontName1">kanbanapi.pro-react.com</span> is provided for educational purposes only. As such, stored information will be reset after 24 hours of inactivity.</p>
<p class="paraaftertitle1">Also, please be careful about storing sensitive information on the <span class="FontName1">kanbanapi.pro-react.com</span> server. Although the server employs standard security measures, it is by definition not private.</p>
<p class="paraaftertitle1">The online API’s terms of use statement is available at <span class="FontName1"><a href="http://kanbanapi.pro-react.com/terms">http://kanbanapi.pro-react.com/terms</a></span>.</p></div>
<p class="indent">Let’s start fetching the initial data for the application on the KanbanBoardContainer component<a id="cXXX.104"></a>, as shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar19" id="_FPar19">Listing 3-15</a>. Note that you also add custom headers to the fetch command to make sure the server will respond properly.</p>
<div class="Sidebar"><p class="listing"><a id="FPar19" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar19"><i><b>Listing 3-15</b></i></a>. Fetching Data Code<a id="cXXX.105"></a></p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">KanbanBoard</span> <b>from</b> <span class="FontName1">’./KanbanBoard’;</span><br><b>import</b> <span class="FontName1">’whatwg-fetch’;</span><br><br><span class="FontName1">// If you’re running the server locally, the URL will be, by default, localhost:3000</span><br><span class="FontName1">// Also, the local server doesn’t need an authorization header.</span><br><b>const API_URL =&nbsp;’</b><b><a href="http://kanbanapi.pro-react.com/">http://kanbanapi.pro-react.com</a></b><b>’;</b><br><b>const API_HEADERS =&nbsp;{</b><br>&nbsp;&nbsp;<b>’Content-Type’: ’application/json’,</b><br>&nbsp;&nbsp;<b>Authorization: ’any-string-you-like’</b><span class="FontName1">// The Authorization is not needed for local server</span><br><b>};</b><br><br><b>class</b> <span class="FontName1">KanbanBoardContainer</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<b>constructor(){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super(...arguments);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this.state =&nbsp;{</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>cards: []</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>};</b><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">componentDidMount(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>fetch(API_URL+’/cards’, {headers: API_HEADERS})</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>.then((response) =&gt; response.json())</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>.then((responseData) =&gt; {</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this.setState({cards: responseData});</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>})</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>.catch((error) =&gt; {</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>console.log(’Error fetching and parsing data’, error);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>});</b><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>KanbanBoard</b> <span class="FontName1">cards={this.state.cards} /&gt;</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><br><span class="FontName1">export default KanbanBoardContainer;</span></pre></div>
<p class="indent">You create a new container component that fetches data remotely and passes to its corresponding pure component. All you need to do now is change the original <span class="FontName1">App.js</span> file to render the new <span class="FontName1">KanbanBoardContainer</span><a id="cXXX.106"></a>, instead of rendering <span class="FontName1">KanbanBoard</span> directly:</p>
<pre><b>import</b> <span class="FontName1">React</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">{render}</span> <b>from</b> <span class="FontName1">’react-dom’;</span><br><b>import</b> <span class="FontName1">KanbanBoardContainer</span> <b>from</b> <span class="FontName1">’./KanbanBoardContainer’;</span><br><br><span class="FontName1">render(&lt;</span><b>KanbanBoardContainer</b> <span class="FontName1">/&gt;</span>, document.getElementById(’root’));</pre>
<p class="indent">If you test right now, it will look like nothing happened at all. The difference is that the Kanban app is live, so the data is no longer hard-coded.</p>
<p id="Sec23" class="Heading3">Wiring Up the Task Callbacks as Props</p>
<p class="noindent">Now let’s create three functions to manipulate the tasks: <span class="FontName1">addTask</span>, <span class="FontName1">deleteTask</span>, and <span class="FontName1">toggleTask</span>. Since tasks belong to a card, all functions need to receive the <span class="FontName1">cardId</span> as a parameter. The <span class="FontName1">addTask</span> will receive the new task text, while both <span class="FontName1">deleteTask</span> and <span class="FontName1">toggleTask</span> should receive the <span class="FontName1">taskId</span> and the <span class="FontName1">taskIndex</span> (the position inside the card’s array of tasks). You will pass the three functions down the whole hierarchy of components as props.</p>
<p class="indent">As a small trick to save a little typing, instead of creating one prop to pass each new function, you create a single object that references the three functions and pass it as a single prop. The code is shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar20" id="_FPar20">Listing 3-16</a>.</p>
<div class="Sidebar"><p class="listing"><a id="FPar20" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar20"><i><b>Listing 3-16</b></i></a>. The New Methods for <a id="cXXX.107"></a>Manipulating Tasks</p>
<pre><b>class</b> <span class="FontName1">KanbanBoardContainer</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor(){...}</span><br>&nbsp;&nbsp;<span class="FontName1">componentDidMount(){...}</span><br><br>&nbsp;&nbsp;<b>addTask(cardId, taskName){</b><br><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<b>deleteTask(cardId, taskId, taskIndex){</b><br><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<b>toggleTask(cardId, taskId, taskIndex){</b><br><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return (</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;KanbanBoard cards={this.state.cards}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>taskCallbacks={{</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>toggle: this.toggleTask.bind(this),</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete: this.deleteTask.bind(this),</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>add: this.addTask.bind(this) }}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><a id="cXXX.108"></a></pre></div>
<p class="indent">Now there’s some repetitive work to be done: all the components between the top of the hierarchy and the CheckList component (that is, the KanbanBoard, List and Card components) must receive the <span class="FontName1">taskCallbacks</span> prop from its parent and pass it along as a prop to its children. Despite looking like a repetitive task, this will make very clear how the communication is flowing from component to component. <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar21" id="_FPar21">Listings 3-17</a>, <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar22" id="_FPar22">3-18</a>, and <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar23" id="_FPar23">3-19</a> show the updated code for those three components.</p>
<div class="Sidebar"><p class="listing"><a id="FPar21" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar21"><i><b>Listing 3-17</b></i></a>. KanbanBoard Component Receiving and Passing the taskCallbacks Prop<a id="cXXX.109"></a></p>
<pre><b>class</b> <span class="FontName1">KanbanBoard</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b> <span class="FontName1">className="app"&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>List</b> <span class="FontName1">title="To Do"</span> <b>taskCallbacks=</b><span class="FontName1">{this.props.taskCallbacks} cards={</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">this.props.cards.filter((card) =&gt; card.status === "todo")</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">} /&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>List</b> <span class="FontName1">title="In Progress"</span> <b>taskCallbacks=</b><span class="FontName1">{this.props.taskCallbacks} cards={</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">this.props.cards.filter((card) =&gt; card.status == "in-progress")</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">} /&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>List</b> <span class="FontName1">title="Done" taskCallbacks={this.props.taskCallbacks} cards={</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">this.props.cards.filter((card) =&gt; card.status == "done")</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">} /&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">KanbanBoard.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">cards: PropTypes.arrayOf(PropTypes.object),</span><br>&nbsp;&nbsp;<b>taskCallbacks: PropTypes.object</b><br><span class="FontName1">}</span></pre></div>
<div class="Sidebar"><p class="listing"><a id="FPar22" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar22"><i><b>Listing 3-18</b></i></a>. List Component Receiving and Passing the taskCallbacks Prop</p>
<pre><b>class</b> <span class="FontName1">List</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cards =</span> <b>this</b><span class="FontName1">.props.cards.map((card) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">&lt;</span><b>Card</b> <span class="FontName1">key={card.id}</span> <b>taskCallbacks=</b><span class="FontName1">{this.props.taskCallbacks} {...card} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">return (...)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">List.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">title: PropTypes.string.isRequired,</span><br>&nbsp;&nbsp;<span class="FontName1">cards: PropTypes.arrayOf(PropTypes.object),</span><br>&nbsp;&nbsp;<b>taskCallbacks: PropTypes.object,</b><br><span class="FontName1">}</span></pre></div>
<p class="indent">In <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar22">Listing 3-18</a>, it’s worth noticing the use of the spread operator to reduce some typing when passing props to the Card component. To learn more about the spread operator, reference the online appendixes.</p>
<div class="Sidebar"><p class="listing"><a id="FPar23" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar23"><i><b>Listing 3-19</b></i></a>. Card Component Receiving and Passing the taskCallbacks Prop</p>
<pre><b>class</b> <span class="FontName1">Card</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor() {...}</span><br>&nbsp;&nbsp;<span class="FontName1">toggleDetails() {...}</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardDetails;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <span class="FontName1">(</span><b>this</b><span class="FontName1">.state.showDetails) {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">cardDetails =&nbsp;(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b> <span class="FontName1">className="card__details"&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>span</b> <span class="FontName1">dangerouslySetInnerHTML={{__html:marked(this.props.description)}} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>CheckList</b> <span class="FontName1">cardId={this.props.id}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">tasks={this.props.tasks}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>taskCallbacks</b><span class="FontName1">={this.props.taskCallbacks} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">sideColor =&nbsp;{...}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(...)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">Card.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">id: PropTypes.number,</span><br>&nbsp;&nbsp;<span class="FontName1">title: titlePropType,</span><br>&nbsp;&nbsp;<span class="FontName1">description: PropTypes.string,</span><br>&nbsp;&nbsp;<span class="FontName1">color: PropTypes.string,</span><br>&nbsp;&nbsp;<span class="FontName1">tasks: PropTypes.array,</span><br>&nbsp;&nbsp;<b>taskCallbacks: PropTypes.object</b><span class="FontName1">,</span><br><span class="FontName1">}</span></pre></div>
<p class="indent">Finally, when in the Checklist component<a id="cXXX.110"></a>, you make use of <span class="FontName1">taskCallbacks.taskCallbacks.delete</span> and <span class="FontName1">taskCallbacks.toggle</span>, which can be directly associated with element event handlers:</p>
<pre><b>class</b> <span class="FontName1">CheckList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">tasks =</span> <b>this</b><span class="FontName1">.props.tasks.map((task, taskIndex) =&gt; (</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>li</b> <span class="FontName1">key={task.id} className="checklist__task"&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="checkbox" checked={task.done}</span> <b>onChange={</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>this.props.taskCallbacks.toggle.bind(null, this.props.cardId, task.id, taskIndex)</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{task.name}{’ ’}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>a</b> <span class="FontName1">href="#" className="checklist__task--remove" onClick=</span><b>{</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>this.props.taskCallbacks.delete.bind(null, this.props.cardId, task.id, taskIndex)</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>li</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">));</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(...);</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span></pre>
<p class="indent">To add a new task, however, you do some pre-processing inside the component before invoking the <span class="FontName1">taskCallbacks.add</span> callback. You do so for two reasons: to check if the user pressed the Enter key, and to clear the input field after invoking the callback function:</p>
<pre><b>class</b> <span class="FontName1">CheckList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<b>checkInputKeyPress(evt){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>if(evt.key === ’Enter’){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this.props.taskCallbacks.add(this.props.cardId, evt.target.value);</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>evt.target.value =&nbsp;’’;</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">tasks =</span> <b>this</b><span class="FontName1">.props.tasks.map((task, taskIndex) =&gt; (...));</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b> <span class="FontName1">className="checklist"&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ul</b><span class="FontName1">&gt;{tasks}&lt;/</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="text"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">className="checklist--add-task"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">placeholder="Type then hit Enter to add a&nbsp;task"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>onKeyPress={this.checkInputKeyPress.bind(this)}</b>&nbsp;&nbsp;<span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span></pre>
<p class="indent">The complete code for the CheckList component is shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar24" id="_FPar24">Listing 3-20</a>.</p>
<div class="Sidebar"><p class="listing"><a id="FPar24" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar24"><i><b>Listing 3-20</b></i></a>. The Complete <a id="cXXX.111"></a>CheckList Component Wired Up to Invoke All Task Callbacks</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component, PropTypes }</span> <b>from</b> <span class="FontName1">’react’;</span><br><br><b>class</b> <span class="FontName1">CheckList</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<b>checkInputKeyPress(evt){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>if(evt.key === ’Enter’){</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this.props.taskCallbacks.add(this.props.cardId, evt.target.value)</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>evt.target.value =&nbsp;’’;</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>&nbsp;&nbsp;<b>}</b><br><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">tasks =</span> <b>this</b><span class="FontName1">.props.tasks.map((task, taskIndex) =&gt; (</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>li</b> <span class="FontName1">key={task.id} className="checklist__task"&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="checkbox" checked={task.done}</span> <b>onChange={</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>this.props.taskCallbacks.toggle.bind(null, this.props.cardId, task.id, taskIndex)</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">{task.name}{’ ’}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>a</b> <span class="FontName1">href="#" className="checklist__task--remove" onClick=</span><b>{</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>this.props.taskCallbacks.delete.bind(null, this.props.cardId, task.id, taskIndex)</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b> <span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>li</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">));</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>div</b> <span class="FontName1">className="checklist"&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>ul</b><span class="FontName1">&gt;{tasks}&lt;/</span><b>ul</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>input</b> <span class="FontName1">type="text"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">className="checklist--add-task"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">placeholder="Type then hit Enter to add a&nbsp;task"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>onKeyPress={this.checkInputKeyPress.bind(this)}</b>&nbsp;&nbsp;<span class="FontName1">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;/</span><b>div</b><span class="FontName1">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><span class="FontName1">CheckList.propTypes =&nbsp;{</span><br>&nbsp;&nbsp;<span class="FontName1">cardId: PropTypes.number,</span><br>&nbsp;&nbsp;<b>taskCallbacks: PropTypes.object,</b><br>&nbsp;&nbsp;<span class="FontName1">tasks: PropTypes.array</span><br><span class="FontName1">};</span><br><br><span class="FontName1">export default CheckList;</span></pre></div>
<p id="Sec24" class="Heading3">Manipulating Tasks</p>
<p class="noindent">In this last part, you make the actual manipulations of the tasks in the <span class="FontName1">KanbanAppContainer</span> state and persist all changes on the server through the API. In all three methods (<span class="FontName1">deleteTask</span>, <span class="FontName1">toggleTask</span>, and <span class="FontName1">addTask</span>), you need to make sure not to manipulate the current state directly, so you will use React’s immutability helpers. Don’t forget to install them using <span class="FontName1">npm install --save react-addons-update</span>.</p>
<p class="indent">There is one problem, though: since you filtered the cards in the KanbanList component, you don’t have access to their original indexes anymore (and their indexes will be required to use the immutability helpers). So you can use the new <span class="FontName1">findIndex()</span> array method that runs a testing function on each element and returns the index of the element that satisfies the testing function.</p>
<div class="notepara"><p class="paraaftertitle1"><img src="./Chapter 3_ Architecting Applications with Components - Pro React_files/sq.jpg" alt="Image" width="15" height="15" data-mfp-src="/library/view/pro-react/9781484212608/images/sq.jpg">&nbsp;<b>Note</b>&nbsp;&nbsp;At the time of this writing, only Chrome and Firefox supported the new methods <span class="FontName1">array.prototype.find</span> and <span class="FontName1">array.prototype.findIndex</span>, so make sure to install babel-polyfill:</p>
<p class="paraaftertitle1"><span class="FontName1">npm install --save</span> <span class="FontName1"><a href="https://www.npmjs.com/package/babel-polyfill">babel-polyfill</a></span></p>
<p class="paraaftertitle1">Then, in your file, import it using:</p>
<pre><span class="FontName1">import ’babel-polyfill’</span></pre></div>
<p class="indent">Let’s start coding the methods, beginning with the <span class="FontName1">deleteTask</span> method<a id="cXXX.112"></a>. You start by finding the index of the card you want by its ID. Then you create a new mutated object without the deleted task using the immutability helpers. Finally, you <span class="FontName1">setState</span> for the mutated object and use <span class="FontName1">Fetch</span> to inform the server of the change.</p>
<pre><span class="FontName1">deleteTask(cardId, taskId, taskIndex){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Find the index of the card</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardIndex =</span> <b>this</b><span class="FontName1">.state.cards.findIndex((card)=&gt;card.id == cardId);</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Create a&nbsp;new object without the task</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">nextState =&nbsp;update(</span><b>this</b><span class="FontName1">.state.cards, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[cardIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">tasks: {$splice: [[taskIndex,1]] }</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// set the component state to the mutated object</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Call the API to remove the task on the server</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards/${cardId}/tasks/${taskId}`, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">method: ’delete’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">headers: API_HEADERS</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span></pre>
<p class="indent">Toggling a task will happen in a similar fashion, but instead of splicing the array, you walk the object hierarchy up to the <span class="FontName1">done</span> property of the task and directly manipulate its value using a function:</p>
<pre><span class="FontName1">toggleTask(cardId, taskId, taskIndex){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Find the index of the card</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardIndex =</span> <b>this</b><span class="FontName1">.state.cards.findIndex((card)=&gt;card.id == cardId);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Save a&nbsp;reference to the task’s ’done’ value</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">newDoneValue;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Using the $apply command, you will change the done value to its opposite</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">nextState =&nbsp;update(</span><b>this</b><span class="FontName1">.state.cards, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[cardIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">tasks: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[taskIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">done: {&nbsp;$apply: (done) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">newDoneValue =&nbsp;!done</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">newDoneValue;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// set the component state to the mutated object</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Call the API to toggle the task on the server</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards/${cardId}/tasks/${taskId}`, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">method: ’put’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">headers: API_HEADERS,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">body: JSON.stringify({done:newDoneValue})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span></pre>
<p class="indent">As you may imagine, adding a new task works in a similar way. The only thing to notice is that since all tasks need an ID, you must generate a temporary ID for the task until it’s persisted to the server and it returns the definitive ID. Then you must update the task ID. The temporary ID can be as simple as the current time in milliseconds:</p>
<pre><span class="FontName1">addTask(cardId, taskName){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Find the index of the card</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardIndex =</span> <b>this</b><span class="FontName1">.state.cards.findIndex((card)=&gt;card.id == cardId);</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Create a&nbsp;new task with the given name and a&nbsp;temporary ID</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">newTask =&nbsp;{id:Date.now(), name:taskName, done:false};</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Create a&nbsp;new object and push the new task to the array of tasks</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">nextState =&nbsp;update(</span><b>this</b><span class="FontName1">.state.cards, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[cardIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">tasks: {$push: [newTask] }</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// set the component state to the mutated object</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Call the API to add the task on the server</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards/${cardId}/tasks`, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">method: ’post’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">headers: API_HEADERS,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">body: JSON.stringify(newTask)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((response) =&gt; response.json())</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((responseData) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// When the server returns the definitive ID</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// used for the new Task on the server, update it on React</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">newTask.id=responseData.id</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span></pre>
<p id="Sec25" class="Heading3">Basic Optimistic Updates Rollback</p>
<p class="noindent">You may have notice that you’ve made all the changes in the UI optimistically, that is, without actually waiting for the server to respond if the changes were saved. Being optimistic is important for perceived performance: when users interact with an online app, they don’t want to wait for things to happen. They don’t care that their tasks need to be stored in a remote database. Everything should appear to happen instantly. But what happens if the server fails? You need to make some new tries, revert back the UI changes, notify the user, and so on. . .</p>
<p class="indent">Optimistic updating and rollback is not a trivial task and can unfold in many outcomes, but it’s easy to cover the basic rollback scenario right now because of a side effect of working with immutable structures: you can keep a reference to the old state and revert it back in case of problems.</p>
<p class="indent">For all three task callbacks, the code will be the same. First, keep a reference to the original state<a id="cXXX.113"></a> of the component:</p>
<pre><span class="FontName1">// Keep a&nbsp;reference to the original state prior to the mutations</span><br><span class="FontName1">// in case you need to revert the optimistic changes in the UI</span><br><b>let</b> <span class="FontName1">prevState =</span> <b>this</b><span class="FontName1">.state;</span></pre>
<p class="indent">In the sequence, use <span class="FontName1">setState</span><a id="cXXX.114"></a> to revert back to the original state if the <span class="FontName1">fetch</span> command fails OR if the server response status was not ok:</p>
<pre><span class="FontName1">fetch(..., {...})</span><br><span class="FontName1">.then((response) =&gt; {</span><br>&nbsp;&nbsp;<b>if</b><span class="FontName1">(!response.ok){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Throw an error if server response wasn’t ’ok’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// so you can revert back the optimistic changes</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// made to the UI.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>throw new</b> <span class="FontName1">Error("Server response wasn’t OK")</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">})</span><br><span class="FontName1">.catch((error) =&gt; {</span><br>&nbsp;&nbsp;<span class="FontName1">console.error("Fetch error:",error)</span><br>&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState(prevState);</span><br><span class="FontName1">});</span></pre>
<p class="indent">To test, you can simply shut down the local API server (or disconnect from the Internet if you are using the online API) and try to make any changes to the tasks.</p>
<p class="indent">The complete for the KanbanAppContainer component is shown in <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#FPar26" id="_FPar26">Listing 3-21</a>.</p>
<div class="Sidebar"><p class="listing"><a id="FPar26" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#_FPar26"><i><b>Listing 3-21</b></i></a>. The Complete KanbanBoardContainer Code<a id="cXXX.115"></a> with the Task Manipulation Methods</p>
<pre><b>import</b> <span class="FontName1">React, {&nbsp;Component }</span> <b>from</b> <span class="FontName1">’react’;</span><br><b>import</b> <span class="FontName1">update</span> <b>from</b> <span class="FontName1">’react-addons-update’;</span><br><b>import</b> <span class="FontName1">KanbanBoard</span> <b>from</b> <span class="FontName1">’./KanbanBoard’;</span><br><span class="FontName1">// Polyfills</span><br><b>import</b> <span class="FontName1">’babel-polyfill’;</span><br><span class="FontName1">import ’whatwg-fetch’;</span><br><br><b>const API_URL =&nbsp;’</b><b><a href="http://kanbanapi.pro-react.com/">http://kanbanapi.pro-react.com</a></b><b>’;</b><br><b>const API_HEADERS =&nbsp;{</b><br>&nbsp;&nbsp;<b>’Content-Type’: ’application/json’,</b><br>&nbsp;&nbsp;<b>Authorization: ’any-string-you-like’</b><span class="FontName1">// The Authorization is not needed for local server</span><br><b>};</b><br><br><b>class</b> <span class="FontName1">KanbanBoardContainer</span> <b>extends</b> <span class="FontName1">Component {</span><br>&nbsp;&nbsp;<span class="FontName1">constructor(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>super</b><span class="FontName1">(...arguments);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.state =&nbsp;{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">cards:[],</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">};</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">componentDidMount(){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards`, {headers:API_HEADERS})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((response) =&gt; response.json())</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((responseData) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">cards: responseData</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">window.state =</span> <b>this</b><span class="FontName1">.state;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">addTask(cardId, taskName){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Keep a&nbsp;reference to the original state prior to the mutations</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// in case you need to revert the optimistic changes in the UI</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">prevState =</span> <b>this</b><span class="FontName1">.state;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Find the index of the card</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardIndex =</span> <b>this</b><span class="FontName1">.state.cards.findIndex((card)=&gt;card.id == cardId);</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Create a&nbsp;new task with the given name and a&nbsp;temporary ID</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">newTask =&nbsp;{id:Date.now(), name:taskName, done:false};</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Create a&nbsp;new object and push the new task to the array of tasks</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">nextState =&nbsp;update(</span><b>this</b><span class="FontName1">.state.cards, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[cardIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">tasks: {$push: [newTask] }</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// set the component state to the mutated object</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Call the API to add the task on the server</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards/${cardId}/tasks`, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">method: ’post’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">headers: API_HEADERS,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">body: JSON.stringify(newTask)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((response) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b><span class="FontName1">(response.ok){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">response.json()</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span> <b>else</b> <span class="FontName1">{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Throw an error if server response wasn’t ’ok’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// so you can revert back the optimistic changes</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// made to the UI.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>throw new</b> <span class="FontName1">Error("Server response wasn’t OK")</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((responseData) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// When the server returns the definitive ID</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// used for the new Task on the server, update it on React</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">newTask.id=responseData.id</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.catch((error) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState(prevState);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">deleteTask(cardId, taskId, taskIndex){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Find the index of the card</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardIndex =</span> <b>this</b><span class="FontName1">.state.cards.findIndex((card)=&gt;card.id == cardId);</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Keep a&nbsp;reference to the original state prior to the mutations</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// in case you need to revert the optimistic changes in the UI</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">prevState =</span> <b>this</b><span class="FontName1">.state;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Create a&nbsp;new object without the task</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">nextState =&nbsp;update(</span><b>this</b><span class="FontName1">.state.cards, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[cardIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">tasks: {$splice: [[taskIndex,1]] }</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// set the component state to the mutated object</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Call the API to remove the task on the server</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards/${cardId}/tasks/${taskId}`, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">method: ’delete’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">headers: API_HEADERS</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((response) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b><span class="FontName1">(!response.ok){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Throw an error if server response wasn’t ’ok’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// so you can revert back the optimistic changes</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// made to the UI.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>throw new</b> <span class="FontName1">Error("Server response wasn’t OK")</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.catch((error) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">console.error("Fetch error:",error)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState(prevState);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">toggleTask(cardId, taskId, taskIndex){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Keep a&nbsp;reference to the original state prior to the mutations</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// in case you need to revert the optimistic changes in the UI</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">prevState =</span> <b>this</b><span class="FontName1">.state;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Find the index of the card</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">cardIndex =</span> <b>this</b><span class="FontName1">.state.cards.findIndex((card)=&gt;card.id == cardId);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Save a&nbsp;reference to the task’s ’done’ value</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">newDoneValue;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Using the $apply command, you will change the done value to its opposite,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>let</b> <span class="FontName1">nextState =&nbsp;update(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.state.cards, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[cardIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">tasks: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">[taskIndex]: {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">done: {&nbsp;$apply: (done) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">newDoneValue =&nbsp;!done</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">newDoneValue;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// set the component state to the mutated object</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState({cards:nextState});</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Call the API to toggle the task on the server</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">fetch(`${API_URL}/cards/${cardId}/tasks/${taskId}`, {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">method: ’put’,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">headers: API_HEADERS,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">body: JSON.stringify({done:newDoneValue})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.then((response) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b><span class="FontName1">(!response.ok){</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// Throw an error if server response wasn’t ’ok’</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// so you can revert back the optimistic changes</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">// made to the UI.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>throw new</b> <span class="FontName1">Error("Server response wasn’t OK")</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">}</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">})</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">.catch((error) =&gt; {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">console.error("Fetch error:",error)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>this</b><span class="FontName1">.setState(prevState);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">});</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><br>&nbsp;&nbsp;<span class="FontName1">render() {</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> <span class="FontName1">(</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">&lt;</span><b>KanbanBoard</b> <span class="FontName1">cards={this.state.cards} taskCallbacks={{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">toggle: this.toggleTask.bind(this),</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">delete: this.deleteTask.bind(this),</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="FontName1">add: this.addTask.bind(this) }} /&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="FontName1">)</span><br>&nbsp;&nbsp;<span class="FontName1">}</span><br><span class="FontName1">}</span><br><br><b>export default</b> <span class="FontName1">KanbanBoardContainer;</span></pre></div>
<p id="Sec26" class="Heading1">Summary</p>
<p class="noindent">In this chapter, you studied how to structure complex UIs in React. You learned that in a React application, data always flows in a single direction, from parent to child components. For communication, a parent component can pass a callback function down as props so child components can report back.</p>
<p class="indent">You also saw that components can be much easier to reuse and reason about if you divide them into two categories: stateful components (which manipulate internal state) and pure components (which don’t have an internal state and only display data received via props). It’s a good practice to structure your application so that it has fewer stateful components (usually on the top levels of your application component hierarchy) and more pure components.</p>
<p class="indent">Finally, you saw why it’s important to treat the component state as immutable, always using <span class="FontName1">this.setState</span> to make changes on it (and you learned how to use React’s immutable helpers to generate mutated, shallow copies of <span class="FontName1">this.state</span>).</p></div><div class="annotator-outer annotator-viewer viewer annotator-hide">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-modal-wrapper annotator-editor-modal annotator-editor annotator-hide">
	<div class="annotator-outer editor">
		<h2 class="title">Highlight</h2>
		<form class="annotator-widget">
			<ul class="annotator-listing">
			<li class="annotator-item"><textarea id="annotator-field-1" placeholder="Add a note using markdown (optional)" class="js-editor" maxlength="750"></textarea></li></ul>
			<div class="annotator-controls">
				<a class="link-to-markdown" href="https://daringfireball.net/projects/markdown/basics" target="_blank">?</a>
				<ul>
					<li class="delete annotator-hide"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#delete" class="annotator-delete-note button positive">Delete Note</a></li>
					<li class="save"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#save" class="annotator-save annotator-focus button positive">Save Note</a></li>
					<li class="cancel"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#cancel" class="annotator-cancel button">Cancel</a></li>
				</ul>
			</div>
		</form>
	</div>
</div><div class="annotator-modal-wrapper annotator-delete-confirm-modal" style="display: none;">
  <div class="annotator-outer">
    <h2 class="title">Highlight</h2>
      <a class="js-close-delete-confirm annotator-cancel close" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#close">Close</a>
      <div class="annotator-widget">
         <div class="delete-confirm">
            Are you sure you want to permanently delete this note?
         </div>
         <div class="annotator-controls">
            <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#cancel" class="annotator-cancel button js-cancel-delete-confirm">No, I changed my mind</a>
            <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#delete" class="annotator-delete button positive js-delete-confirm">Yes, delete it</a>
         </div>
       </div>
   </div>
</div><div class="annotator-adder" style="display: block; top: 31452.1px; left: 300px; width: 260px;">
	<ul class="adders  expandUp">
		
		<li class="copy"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#">Copy</a></li>
		
		<li class="add-highlight"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#">Add Highlight</a></li>
		<li class="add-note"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#">
			
				Add Note
			
		</a></li>
	</ul>
</div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch02.xhtml" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Chapter 2: Inside the DOM Abstraction</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch04.xhtml" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">Chapter 4: Sophisticated Interactions</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9781484212608/chapter/9781484212615_Ch03.xhtml" data-for-analytics="9781484212608:9781484212615_Ch03.xhtml" aria-label="Add to Queue">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    



        
      </div><div class="font-flyout" style="top: 200px; left: 1196px;"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span class="filler" style="width: 50%;"></span>
			<div id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle" style="position: relative; left: 80px;"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#">Reset</a>
</div>
</div>
      



  <footer class="pagefoot t-pagefoot">
    <a href="https://www.safaribooksonline.com/library/view/pro-react/9781484212608/9781484212615_Ch03.xhtml#" class="icon-up" style="display: block;"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/history/">History</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/apps/">Get the App</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationID":"3275661","queueTime":0,"licenseKey":"510f1a6865","agent":"","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","applicationTime":948}</script>


    

    <script src="./Chapter 3_ Architecting Applications with Components - Pro React_files/saved_resource" charset="utf-8"></script>
    <script src="./Chapter 3_ Architecting Applications with Components - Pro React_files/saved_resource(1)" charset="utf-8"></script>
  

<div class="annotator-notice"></div></body></html>